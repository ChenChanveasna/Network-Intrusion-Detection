{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6312696,"sourceType":"datasetVersion","datasetId":3631110},{"sourceId":10026246,"sourceType":"datasetVersion","datasetId":6174410},{"sourceId":10035404,"sourceType":"datasetVersion","datasetId":6181163},{"sourceId":10046325,"sourceType":"datasetVersion","datasetId":6189269},{"sourceId":181227,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":154451,"modelId":176928},{"sourceId":182235,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":155340,"modelId":177812}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Data Cleaning and Preprocessing and Merging","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:41:44.288069Z","iopub.execute_input":"2024-11-30T11:41:44.288474Z","iopub.status.idle":"2024-11-30T11:41:44.293705Z","shell.execute_reply.started":"2024-11-30T11:41:44.288445Z","shell.execute_reply":"2024-11-30T11:41:44.292576Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/tii-ssrc-23/csv/data.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:41:46.588234Z","iopub.execute_input":"2024-11-30T11:41:46.588792Z","iopub.status.idle":"2024-11-30T11:44:27.330975Z","shell.execute_reply.started":"2024-11-30T11:41:46.588753Z","shell.execute_reply":"2024-11-30T11:44:27.329895Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df.dropna(inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:35:37.275148Z","iopub.execute_input":"2024-11-30T11:35:37.275523Z","iopub.status.idle":"2024-11-30T11:35:44.274943Z","shell.execute_reply.started":"2024-11-30T11:35:37.275476Z","shell.execute_reply":"2024-11-30T11:35:44.273989Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:36:16.401383Z","iopub.execute_input":"2024-11-30T11:36:16.401823Z","iopub.status.idle":"2024-11-30T11:36:16.410553Z","shell.execute_reply.started":"2024-11-30T11:36:16.401785Z","shell.execute_reply":"2024-11-30T11:36:16.409366Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"Index(['Flow ID', 'Src IP', 'Src Port', 'Dst IP', 'Dst Port', 'Protocol',\n       'Timestamp', 'Flow Duration', 'Total Fwd Packet', 'Total Bwd packets',\n       'Total Length of Fwd Packet', 'Total Length of Bwd Packet',\n       'Fwd Packet Length Max', 'Fwd Packet Length Min',\n       'Fwd Packet Length Mean', 'Fwd Packet Length Std',\n       'Bwd Packet Length Max', 'Bwd Packet Length Min',\n       'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes/s',\n       'Flow Packets/s', 'Flow IAT Mean', 'Flow IAT Std', 'Flow IAT Max',\n       'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Mean', 'Fwd IAT Std',\n       'Fwd IAT Max', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean',\n       'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags',\n       'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags', 'Fwd Header Length',\n       'Bwd Header Length', 'Fwd Packets/s', 'Bwd Packets/s',\n       'Packet Length Min', 'Packet Length Max', 'Packet Length Mean',\n       'Packet Length Std', 'Packet Length Variance', 'FIN Flag Count',\n       'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count', 'ACK Flag Count',\n       'URG Flag Count', 'CWR Flag Count', 'ECE Flag Count', 'Down/Up Ratio',\n       'Average Packet Size', 'Fwd Segment Size Avg', 'Bwd Segment Size Avg',\n       'Fwd Bytes/Bulk Avg', 'Fwd Packet/Bulk Avg', 'Fwd Bulk Rate Avg',\n       'Bwd Bytes/Bulk Avg', 'Bwd Packet/Bulk Avg', 'Bwd Bulk Rate Avg',\n       'Subflow Fwd Packets', 'Subflow Fwd Bytes', 'Subflow Bwd Packets',\n       'Subflow Bwd Bytes', 'FWD Init Win Bytes', 'Bwd Init Win Bytes',\n       'Fwd Act Data Pkts', 'Fwd Seg Size Min', 'Active Mean', 'Active Std',\n       'Active Max', 'Active Min', 'Idle Mean', 'Idle Std', 'Idle Max',\n       'Idle Min', 'Label', 'Traffic Type', 'Traffic Subtype'],\n      dtype='object')"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:36:37.289343Z","iopub.execute_input":"2024-11-30T11:36:37.289779Z","iopub.status.idle":"2024-11-30T11:36:37.297673Z","shell.execute_reply.started":"2024-11-30T11:36:37.289739Z","shell.execute_reply":"2024-11-30T11:36:37.296625Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(8656767, 86)"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"df['Label'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:36:52.347433Z","iopub.execute_input":"2024-11-30T11:36:52.348006Z","iopub.status.idle":"2024-11-30T11:36:53.030726Z","shell.execute_reply.started":"2024-11-30T11:36:52.347969Z","shell.execute_reply":"2024-11-30T11:36:53.029437Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"Label\nMalicious    8655466\nBenign          1301\nName: count, dtype: int64"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"Since this dataset contain very low numbers of Benign Label, we will try to add more Benign by importing from CIC-IDS2017 (Monday)","metadata":{}},{"cell_type":"code","source":"df2 = pd.read_csv('/kaggle/input/monday-benign/Benign-Monday-WorkingHours.pcap_ISCX.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:44:27.333441Z","iopub.execute_input":"2024-11-30T11:44:27.333922Z","iopub.status.idle":"2024-11-30T11:44:34.365986Z","shell.execute_reply.started":"2024-11-30T11:44:27.333870Z","shell.execute_reply":"2024-11-30T11:44:34.364660Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df2.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T11:00:42.653165Z","iopub.execute_input":"2024-11-27T11:00:42.653711Z","iopub.status.idle":"2024-11-27T11:00:42.662827Z","shell.execute_reply.started":"2024-11-27T11:00:42.653669Z","shell.execute_reply":"2024-11-27T11:00:42.661434Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"(529918, 84)"},"metadata":{}}],"execution_count":11},{"cell_type":"markdown","source":"**Cleaning the benign_df**","metadata":{}},{"cell_type":"code","source":"df2.replace([-np.inf, np.inf], np.nan, inplace=True) # replace infinite value with NaN\ndf2.dropna(inplace=True) # drop NaN\ndf2.drop_duplicates(inplace=True) # drop duplicates\ndf2.reset_index(drop=True, inplace=True) # reset index\ndf2['Label'] = df2['Label'].map({'BENIGN': 'Benign'})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:44:34.367440Z","iopub.execute_input":"2024-11-30T11:44:34.367829Z","iopub.status.idle":"2024-11-30T11:44:37.196431Z","shell.execute_reply.started":"2024-11-30T11:44:34.367788Z","shell.execute_reply":"2024-11-30T11:44:37.195198Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"**Checking the Columns name of both Datasets**","metadata":{}},{"cell_type":"code","source":"print(\"5GB Dataset Columns:\", df.columns)\nprint(\"CIC-IDS2017 Benign Dataset Columns:\", df2.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T11:04:40.896686Z","iopub.execute_input":"2024-11-27T11:04:40.897347Z","iopub.status.idle":"2024-11-27T11:04:40.907286Z","shell.execute_reply.started":"2024-11-27T11:04:40.897298Z","shell.execute_reply":"2024-11-27T11:04:40.905123Z"}},"outputs":[{"name":"stdout","text":"5GB Dataset Columns: Index(['Flow ID', 'Src IP', 'Src Port', 'Dst IP', 'Dst Port', 'Protocol',\n       'Timestamp', 'Flow Duration', 'Total Fwd Packet', 'Total Bwd packets',\n       'Total Length of Fwd Packet', 'Total Length of Bwd Packet',\n       'Fwd Packet Length Max', 'Fwd Packet Length Min',\n       'Fwd Packet Length Mean', 'Fwd Packet Length Std',\n       'Bwd Packet Length Max', 'Bwd Packet Length Min',\n       'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes/s',\n       'Flow Packets/s', 'Flow IAT Mean', 'Flow IAT Std', 'Flow IAT Max',\n       'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Mean', 'Fwd IAT Std',\n       'Fwd IAT Max', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean',\n       'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags',\n       'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags', 'Fwd Header Length',\n       'Bwd Header Length', 'Fwd Packets/s', 'Bwd Packets/s',\n       'Packet Length Min', 'Packet Length Max', 'Packet Length Mean',\n       'Packet Length Std', 'Packet Length Variance', 'FIN Flag Count',\n       'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count', 'ACK Flag Count',\n       'URG Flag Count', 'CWR Flag Count', 'ECE Flag Count', 'Down/Up Ratio',\n       'Average Packet Size', 'Fwd Segment Size Avg', 'Bwd Segment Size Avg',\n       'Fwd Bytes/Bulk Avg', 'Fwd Packet/Bulk Avg', 'Fwd Bulk Rate Avg',\n       'Bwd Bytes/Bulk Avg', 'Bwd Packet/Bulk Avg', 'Bwd Bulk Rate Avg',\n       'Subflow Fwd Packets', 'Subflow Fwd Bytes', 'Subflow Bwd Packets',\n       'Subflow Bwd Bytes', 'FWD Init Win Bytes', 'Bwd Init Win Bytes',\n       'Fwd Act Data Pkts', 'Fwd Seg Size Min', 'Active Mean', 'Active Std',\n       'Active Max', 'Active Min', 'Idle Mean', 'Idle Std', 'Idle Max',\n       'Idle Min', 'Label'],\n      dtype='object')\nCIC-IDS2017 Benign Dataset Columns: Index(['Flow ID', 'Source IP', 'Source Port', 'Destination IP',\n       'Destination Port', 'Protocol', 'Timestamp', 'Flow Duration',\n       'Total Fwd Packets', 'Total Backward Packets',\n       'Total Length of Fwd Packets', 'Total Length of Bwd Packets',\n       'Fwd Packet Length Max', 'Fwd Packet Length Min',\n       'Fwd Packet Length Mean', 'Fwd Packet Length Std',\n       'Bwd Packet Length Max', 'Bwd Packet Length Min',\n       'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes/s',\n       'Flow Packets/s', 'Flow IAT Mean', 'Flow IAT Std', 'Flow IAT Max',\n       'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Mean', 'Fwd IAT Std',\n       'Fwd IAT Max', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean',\n       'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags',\n       'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags', 'Fwd Header Length',\n       'Bwd Header Length', 'Fwd Packets/s', 'Bwd Packets/s',\n       'Min Packet Length', 'Max Packet Length', 'Packet Length Mean',\n       'Packet Length Std', 'Packet Length Variance', 'FIN Flag Count',\n       'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count', 'ACK Flag Count',\n       'URG Flag Count', 'CWE Flag Count', 'ECE Flag Count', 'Down/Up Ratio',\n       'Average Packet Size', 'Avg Fwd Segment Size', 'Avg Bwd Segment Size',\n       'Fwd Avg Bytes/Bulk', 'Fwd Avg Packets/Bulk', 'Fwd Avg Bulk Rate',\n       'Bwd Avg Bytes/Bulk', 'Bwd Avg Packets/Bulk', 'Bwd Avg Bulk Rate',\n       'Subflow Fwd Packets', 'Subflow Fwd Bytes', 'Subflow Bwd Packets',\n       'Subflow Bwd Bytes', 'Init_Win_bytes_forward',\n       'Init_Win_bytes_backward', 'act_data_pkt_fwd', 'min_seg_size_forward',\n       'Active Mean', 'Active Std', 'Active Max', 'Active Min', 'Idle Mean',\n       'Idle Std', 'Idle Max', 'Idle Min', 'Label'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# Create a mapping dictionary\nmapping = dict(zip(df2.columns, df.columns))\n\n# Rename columns in df1 using the mapping\ndf2 = df2.rename(columns=mapping)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:44:37.199027Z","iopub.execute_input":"2024-11-30T11:44:37.199389Z","iopub.status.idle":"2024-11-30T11:44:37.345781Z","shell.execute_reply.started":"2024-11-30T11:44:37.199353Z","shell.execute_reply":"2024-11-30T11:44:37.344727Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"df2['Traffic Type'] = 'Na'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:44:37.347223Z","iopub.execute_input":"2024-11-30T11:44:37.347678Z","iopub.status.idle":"2024-11-30T11:44:37.357039Z","shell.execute_reply.started":"2024-11-30T11:44:37.347640Z","shell.execute_reply":"2024-11-30T11:44:37.355818Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"df2['Traffic Subtype'] = 'Na'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:50:38.929004Z","iopub.execute_input":"2024-11-30T11:50:38.929586Z","iopub.status.idle":"2024-11-30T11:50:38.939527Z","shell.execute_reply.started":"2024-11-30T11:50:38.929522Z","shell.execute_reply":"2024-11-30T11:50:38.938178Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Checking the columns name again\nprint(\"5GB Dataset Columns:\", df.columns)\nprint(\"CIC-IDS2017 Benign Dataset Columns:\", df2.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T11:05:06.354337Z","iopub.execute_input":"2024-11-27T11:05:06.354866Z","iopub.status.idle":"2024-11-27T11:05:06.363698Z","shell.execute_reply.started":"2024-11-27T11:05:06.354826Z","shell.execute_reply":"2024-11-27T11:05:06.362139Z"}},"outputs":[{"name":"stdout","text":"5GB Dataset Columns: Index(['Flow ID', 'Src IP', 'Src Port', 'Dst IP', 'Dst Port', 'Protocol',\n       'Timestamp', 'Flow Duration', 'Total Fwd Packet', 'Total Bwd packets',\n       'Total Length of Fwd Packet', 'Total Length of Bwd Packet',\n       'Fwd Packet Length Max', 'Fwd Packet Length Min',\n       'Fwd Packet Length Mean', 'Fwd Packet Length Std',\n       'Bwd Packet Length Max', 'Bwd Packet Length Min',\n       'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes/s',\n       'Flow Packets/s', 'Flow IAT Mean', 'Flow IAT Std', 'Flow IAT Max',\n       'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Mean', 'Fwd IAT Std',\n       'Fwd IAT Max', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean',\n       'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags',\n       'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags', 'Fwd Header Length',\n       'Bwd Header Length', 'Fwd Packets/s', 'Bwd Packets/s',\n       'Packet Length Min', 'Packet Length Max', 'Packet Length Mean',\n       'Packet Length Std', 'Packet Length Variance', 'FIN Flag Count',\n       'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count', 'ACK Flag Count',\n       'URG Flag Count', 'CWR Flag Count', 'ECE Flag Count', 'Down/Up Ratio',\n       'Average Packet Size', 'Fwd Segment Size Avg', 'Bwd Segment Size Avg',\n       'Fwd Bytes/Bulk Avg', 'Fwd Packet/Bulk Avg', 'Fwd Bulk Rate Avg',\n       'Bwd Bytes/Bulk Avg', 'Bwd Packet/Bulk Avg', 'Bwd Bulk Rate Avg',\n       'Subflow Fwd Packets', 'Subflow Fwd Bytes', 'Subflow Bwd Packets',\n       'Subflow Bwd Bytes', 'FWD Init Win Bytes', 'Bwd Init Win Bytes',\n       'Fwd Act Data Pkts', 'Fwd Seg Size Min', 'Active Mean', 'Active Std',\n       'Active Max', 'Active Min', 'Idle Mean', 'Idle Std', 'Idle Max',\n       'Idle Min', 'Label'],\n      dtype='object')\nCIC-IDS2017 Benign Dataset Columns: Index(['Flow ID', 'Src IP', 'Src Port', 'Dst IP', 'Dst Port', 'Protocol',\n       'Timestamp', 'Flow Duration', 'Total Fwd Packet', 'Total Bwd packets',\n       'Total Length of Fwd Packet', 'Total Length of Bwd Packet',\n       'Fwd Packet Length Max', 'Fwd Packet Length Min',\n       'Fwd Packet Length Mean', 'Fwd Packet Length Std',\n       'Bwd Packet Length Max', 'Bwd Packet Length Min',\n       'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes/s',\n       'Flow Packets/s', 'Flow IAT Mean', 'Flow IAT Std', 'Flow IAT Max',\n       'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Mean', 'Fwd IAT Std',\n       'Fwd IAT Max', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean',\n       'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags',\n       'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags', 'Fwd Header Length',\n       'Bwd Header Length', 'Fwd Packets/s', 'Bwd Packets/s',\n       'Packet Length Min', 'Packet Length Max', 'Packet Length Mean',\n       'Packet Length Std', 'Packet Length Variance', 'FIN Flag Count',\n       'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count', 'ACK Flag Count',\n       'URG Flag Count', 'CWR Flag Count', 'ECE Flag Count', 'Down/Up Ratio',\n       'Average Packet Size', 'Fwd Segment Size Avg', 'Bwd Segment Size Avg',\n       'Fwd Bytes/Bulk Avg', 'Fwd Packet/Bulk Avg', 'Fwd Bulk Rate Avg',\n       'Bwd Bytes/Bulk Avg', 'Bwd Packet/Bulk Avg', 'Bwd Bulk Rate Avg',\n       'Subflow Fwd Packets', 'Subflow Fwd Bytes', 'Subflow Bwd Packets',\n       'Subflow Bwd Bytes', 'FWD Init Win Bytes', 'Bwd Init Win Bytes',\n       'Fwd Act Data Pkts', 'Fwd Seg Size Min', 'Active Mean', 'Active Std',\n       'Active Max', 'Active Min', 'Idle Mean', 'Idle Std', 'Idle Max',\n       'Idle Min', 'Label'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":17},{"cell_type":"markdown","source":"**Now that we have both Dataset with the same columns name let merge it** ","metadata":{}},{"cell_type":"code","source":"combined_df = pd.concat([df, df2], ignore_index=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:50:56.801616Z","iopub.execute_input":"2024-11-30T11:50:56.802044Z","iopub.status.idle":"2024-11-30T11:50:59.909107Z","shell.execute_reply.started":"2024-11-30T11:50:56.802012Z","shell.execute_reply":"2024-11-30T11:50:59.907926Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# Drop identifier\ncombined_df.drop(columns= ['Flow ID', 'Src IP', 'Dst IP','Timestamp', 'Traffic Type', 'Traffic Subtype'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T11:37:42.873553Z","iopub.execute_input":"2024-11-30T11:37:42.873920Z","iopub.status.idle":"2024-11-30T11:37:45.211445Z","shell.execute_reply.started":"2024-11-30T11:37:42.873884Z","shell.execute_reply":"2024-11-30T11:37:45.210472Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Output the file to save for future use\ncombined_df.to_csv('/kaggle/working/combined_tii2023_and_cicids2017.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T11:26:57.262088Z","iopub.execute_input":"2024-11-27T11:26:57.262586Z","iopub.status.idle":"2024-11-27T11:37:02.568139Z","shell.execute_reply.started":"2024-11-27T11:26:57.262536Z","shell.execute_reply":"2024-11-27T11:37:02.566519Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"benign_df = combined_df[combined_df['Label'] == 'Benign']\nmalicious_df = combined_df[combined_df['Label'] == 'Malicious']\n\nmalicious_downsampled = malicious_df.sample(frac=0.25, random_state=42)\n\nreduced_df = pd.concat([benign_df, malicious_downsampled])\n\nreduced_df['Label'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T12:01:55.396352Z","iopub.execute_input":"2024-11-30T12:01:55.396779Z","iopub.status.idle":"2024-11-30T12:02:11.972046Z","shell.execute_reply.started":"2024-11-30T12:01:55.396744Z","shell.execute_reply":"2024-11-30T12:02:11.970906Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"Label\nMalicious    2163866\nBenign        530746\nName: count, dtype: int64"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"reduced_df['Traffic Type'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T12:02:22.088946Z","iopub.execute_input":"2024-11-30T12:02:22.089331Z","iopub.status.idle":"2024-11-30T12:02:22.301102Z","shell.execute_reply.started":"2024-11-30T12:02:22.089300Z","shell.execute_reply":"2024-11-30T12:02:22.299746Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"Traffic Type\nDoS                      1872825\nNa                        529445\nInformation Gathering     259676\nMirai                      22552\nBruteforce                  8813\nVideo                        870\nText                         209\nAudio                        190\nBackground                    32\nName: count, dtype: int64"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Get value counts from the DataFrame\ntraffic_counts = reduced_df['Traffic Type'].value_counts()\n\n# Create a bar chart with different colors\nplt.figure(figsize=(10, 6))\nplt.bar(traffic_counts.index, traffic_counts.values, color='skyblue')\nplt.xlabel('Traffic Type')\nplt.ylabel('Count (Million)')\nplt.title('Distribution of Traffic Types')\nplt.xticks(rotation=45)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T12:04:57.312755Z","iopub.execute_input":"2024-11-30T12:04:57.313584Z","iopub.status.idle":"2024-11-30T12:04:57.827314Z","shell.execute_reply.started":"2024-11-30T12:04:57.313538Z","shell.execute_reply":"2024-11-30T12:04:57.825794Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":33},{"cell_type":"markdown","source":"# Start From Here If You Have The Combined Dataset","metadata":{}},{"cell_type":"markdown","source":"**Read the combined_df**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv('/kaggle/input/tii2023-cic2017-benign-malicious/combined_tii2023_and_cicids2017.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T05:11:49.290706Z","iopub.execute_input":"2024-11-30T05:11:49.291123Z","iopub.status.idle":"2024-11-30T05:14:34.457500Z","shell.execute_reply.started":"2024-11-30T05:11:49.291084Z","shell.execute_reply":"2024-11-30T05:14:34.455927Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"benign_df = df[df['Label'] == 'Benign']\nmalicious_df = df[df['Label'] == 'Malicious']\n\nmalicious_downsampled = malicious_df.sample(frac=0.25, random_state=42)\n\nreduced_df = pd.concat([benign_df, malicious_downsampled])\n\nreduced_df['Label'].value_counts()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_encoded = reduced_df.join(pd.get_dummies(reduced_df['Label'], prefix='Label'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T05:14:43.065783Z","iopub.execute_input":"2024-11-30T05:14:43.066518Z","iopub.status.idle":"2024-11-30T05:14:45.464542Z","shell.execute_reply.started":"2024-11-30T05:14:43.066468Z","shell.execute_reply":"2024-11-30T05:14:45.463526Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df_encoded.drop(columns=['Unnamed: 0'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T05:14:45.466701Z","iopub.execute_input":"2024-11-30T05:14:45.467030Z","iopub.status.idle":"2024-11-30T05:14:46.135704Z","shell.execute_reply.started":"2024-11-30T05:14:45.466998Z","shell.execute_reply":"2024-11-30T05:14:46.134564Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df_encoded.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T05:14:46.137092Z","iopub.execute_input":"2024-11-30T05:14:46.137459Z","iopub.status.idle":"2024-11-30T05:14:46.160410Z","shell.execute_reply.started":"2024-11-30T05:14:46.137420Z","shell.execute_reply":"2024-11-30T05:14:46.159031Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 2694612 entries, 0 to 2813507\nData columns (total 82 columns):\n #   Column                      Dtype  \n---  ------                      -----  \n 0   Src Port                    float64\n 1   Dst Port                    int64  \n 2   Protocol                    float64\n 3   Flow Duration               float64\n 4   Total Fwd Packet            float64\n 5   Total Bwd packets           float64\n 6   Total Length of Fwd Packet  float64\n 7   Total Length of Bwd Packet  float64\n 8   Fwd Packet Length Max       float64\n 9   Fwd Packet Length Min       float64\n 10  Fwd Packet Length Mean      float64\n 11  Fwd Packet Length Std       float64\n 12  Bwd Packet Length Max       float64\n 13  Bwd Packet Length Min       float64\n 14  Bwd Packet Length Mean      float64\n 15  Bwd Packet Length Std       float64\n 16  Flow Bytes/s                float64\n 17  Flow Packets/s              float64\n 18  Flow IAT Mean               float64\n 19  Flow IAT Std                float64\n 20  Flow IAT Max                float64\n 21  Flow IAT Min                float64\n 22  Fwd IAT Total               float64\n 23  Fwd IAT Mean                float64\n 24  Fwd IAT Std                 float64\n 25  Fwd IAT Max                 float64\n 26  Fwd IAT Min                 float64\n 27  Bwd IAT Total               float64\n 28  Bwd IAT Mean                float64\n 29  Bwd IAT Std                 float64\n 30  Bwd IAT Max                 float64\n 31  Bwd IAT Min                 float64\n 32  Fwd PSH Flags               float64\n 33  Bwd PSH Flags               float64\n 34  Fwd URG Flags               float64\n 35  Bwd URG Flags               float64\n 36  Fwd Header Length           float64\n 37  Bwd Header Length           float64\n 38  Fwd Packets/s               float64\n 39  Bwd Packets/s               float64\n 40  Packet Length Min           float64\n 41  Packet Length Max           float64\n 42  Packet Length Mean          float64\n 43  Packet Length Std           float64\n 44  Packet Length Variance      float64\n 45  FIN Flag Count              float64\n 46  SYN Flag Count              float64\n 47  RST Flag Count              float64\n 48  PSH Flag Count              float64\n 49  ACK Flag Count              float64\n 50  URG Flag Count              float64\n 51  CWR Flag Count              float64\n 52  ECE Flag Count              float64\n 53  Down/Up Ratio               float64\n 54  Average Packet Size         float64\n 55  Fwd Segment Size Avg        float64\n 56  Bwd Segment Size Avg        float64\n 57  Fwd Bytes/Bulk Avg          float64\n 58  Fwd Packet/Bulk Avg         float64\n 59  Fwd Bulk Rate Avg           float64\n 60  Bwd Bytes/Bulk Avg          float64\n 61  Bwd Packet/Bulk Avg         float64\n 62  Bwd Bulk Rate Avg           float64\n 63  Subflow Fwd Packets         float64\n 64  Subflow Fwd Bytes           float64\n 65  Subflow Bwd Packets         float64\n 66  Subflow Bwd Bytes           float64\n 67  FWD Init Win Bytes          float64\n 68  Bwd Init Win Bytes          float64\n 69  Fwd Act Data Pkts           float64\n 70  Fwd Seg Size Min            float64\n 71  Active Mean                 float64\n 72  Active Std                  float64\n 73  Active Max                  float64\n 74  Active Min                  float64\n 75  Idle Mean                   float64\n 76  Idle Std                    float64\n 77  Idle Max                    float64\n 78  Idle Min                    float64\n 79  Label                       object \n 80  Label_Benign                bool   \n 81  Label_Malicious             bool   \ndtypes: bool(2), float64(78), int64(1), object(1)\nmemory usage: 1.7+ GB\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import plotly.graph_objects as go\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Train the model\nmodel = RandomForestClassifier()\nmodel.fit(df_encoded.drop(['Label','Label_Malicious','Label_Benign'], axis=1), df_encoded['Label'])\n\n# Get feature importances\nimportances = model.feature_importances_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T05:14:46.161896Z","iopub.execute_input":"2024-11-30T05:14:46.162378Z","iopub.status.idle":"2024-11-30T05:33:19.994972Z","shell.execute_reply.started":"2024-11-30T05:14:46.162342Z","shell.execute_reply":"2024-11-30T05:33:19.993331Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# Convert the importances into a DataFrame\nfeature_importance_df = pd.DataFrame({\n    'Feature': df_encoded.drop(['Label','Label_Malicious','Label_Benign'], axis=1).columns,\n    'Importance': importances\n})\n\n# Sort the DataFrame to plot\nfeature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T05:33:19.996943Z","iopub.execute_input":"2024-11-30T05:33:19.997991Z","iopub.status.idle":"2024-11-30T05:33:20.695392Z","shell.execute_reply.started":"2024-11-30T05:33:19.997950Z","shell.execute_reply":"2024-11-30T05:33:20.694298Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T05:36:12.001001Z","iopub.execute_input":"2024-11-30T05:36:12.001479Z","iopub.status.idle":"2024-11-30T05:36:12.008694Z","shell.execute_reply.started":"2024-11-30T05:36:12.001439Z","shell.execute_reply":"2024-11-30T05:36:12.007335Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n# Plot Feature Importances\ndef plot_feature_importances(feature_importance_df):\n    plt.figure(figsize=(10, 6))\n    plt.barh(top_feature['Feature'], top_feature['Importance'], color='skyblue')\n    plt.xlabel('Importance')\n    plt.ylabel('Feature')\n    plt.title('Feature Importances')\n    plt.gca().invert_yaxis()  # Invert y-axis for better readability\n    plt.show()\n\nplot_feature_importances(feature_importance_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T05:36:17.586853Z","iopub.execute_input":"2024-11-30T05:36:17.587246Z","iopub.status.idle":"2024-11-30T05:36:17.906677Z","shell.execute_reply.started":"2024-11-30T05:36:17.587189Z","shell.execute_reply":"2024-11-30T05:36:17.905759Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA/AAAAIjCAYAAACkgvA7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACLtUlEQVR4nOzdeVRV9f7/8ddhRg6DgAaOqDgmKo5XRcApsTCt1KvXCadGM8fSzFJzyqHpWloOYKYNlqlZjuTBMcMBzdmc62KaA4oDIJzfH/zY3044gKJ46vlYa6/l2fuzP5/33nTXuq/z+ex9TFar1SoAAAAAAPBAcyjsAgAAAAAAwO0R4AEAAAAAsAMEeAAAAAAA7AABHgAAAAAAO0CABwAAAADADhDgAQAAAACwAwR4AAAAAADsAAEeAAAAAAA7QIAHAAAAAMAOEOABAAAAALADBHgAAKC4uDiZTKYbbsOGDbsnY27atEmjRo3ShQsX7kn/dyPnfmzdurWwS7ljH374oeLi4gq7DABAAXIq7AIAAMCDY8yYMSpXrpzNvurVq9+TsTZt2qTRo0crJiZGPj4+92SMf7IPP/xQ/v7+iomJKexSAAAFhAAPAAAMrVu3Vt26dQu7jLty+fJleXh4FHYZhebKlSsqUqRIYZcBALgHWEIPAADybPny5WrSpIk8PDzk6empxx57THv27LFps2vXLsXExKh8+fJyc3NTQECAevXqpbNnzxptRo0apaFDh0qSypUrZyzXP3bsmI4dOyaTyXTD5d8mk0mjRo2y6cdkMmnv3r36z3/+o6JFiyosLMw4/umnn6pOnTpyd3eXr6+vOnXqpJMnT97RtcfExMhsNuvEiROKjo6W2WxWyZIl9cEHH0iSfv75ZzVr1kweHh4qW7asFixYYHN+zrL8devW6ZlnnpGfn5+8vLzUvXt3nT9/Ptd4H374oR5++GG5urqqRIkSeuGFF3I9bhAZGanq1atr27ZtCg8PV5EiRfTqq68qKChIe/bsUUJCgnFvIyMjJUnnzp3TkCFDFBISIrPZLC8vL7Vu3Vo7d+606dtischkMunLL7/UuHHjVKpUKbm5ual58+b65ZdfctW7ZcsWPfrooypatKg8PDxUo0YNvffeezZt9u/fr/bt28vX11dubm6qW7euli5datMmIyNDo0ePVsWKFeXm5iY/Pz+FhYVp9erVefo7AcDfGTPwAADAkJKSoj/++MNmn7+/vyRp3rx56tGjh1q1aqW33npLV65c0fTp0xUWFqYdO3YoKChIkrR69WodOXJEPXv2VEBAgPbs2aOPP/5Ye/bs0Y8//iiTyaQnn3xSBw8e1GeffaZ33nnHGKNYsWI6c+ZMvuvu0KGDKlasqPHjx8tqtUqSxo0bp5EjR6pjx47q06ePzpw5o//+978KDw/Xjh077mjZfmZmplq3bq3w8HBNmjRJ8+fPV79+/eTh4aERI0aoS5cuevLJJzVjxgx1795dDRs2zPVIQr9+/eTj46NRo0bpwIEDmj59uo4fP24EZin7i4nRo0erRYsWeu6554x2iYmJ2rhxo5ydnY3+zp49q9atW6tTp07q2rWrHnroIUVGRurFF1+U2WzWiBEjJEkPPfSQJOnIkSNavHixOnTooHLlyun333/XRx99pIiICO3du1clSpSwqXfixIlycHDQkCFDlJKSokmTJqlLly7asmWL0Wb16tWKjo5WYGCgXnrpJQUEBGjfvn1atmyZXnrpJUnSnj171LhxY5UsWVLDhg2Th4eHvvzyS7Vr105ff/21nnjiCePaJ0yYoD59+qh+/fq6ePGitm7dqu3bt6tly5b5/psBwN+KFQAA/OPFxsZaJd1ws1qt1kuXLll9fHysffv2tTnv1KlTVm9vb5v9V65cydX/Z599ZpVkXbdunbFv8uTJVknWo0eP2rQ9evSoVZI1NjY2Vz+SrG+88Ybx+Y033rBKsnbu3Nmm3bFjx6yOjo7WcePG2ez/+eefrU5OTrn23+x+JCYmGvt69OhhlWQdP368se/8+fNWd3d3q8lksn7++efG/v379+eqNafPOnXqWNPT0439kyZNskqyLlmyxGq1Wq2nT5+2uri4WB955BFrZmam0W7atGlWSdY5c+YY+yIiIqySrDNmzMh1DQ8//LA1IiIi1/5r167Z9Gu1Zt9zV1dX65gxY4x9a9eutUqyVq1a1ZqWlmbsf++996ySrD///LPVarVar1+/bi1Xrpy1bNmy1vPnz9v0m5WVZfy7efPm1pCQEOu1a9dsjjdq1MhasWJFY1/NmjWtjz32WK66AQBWK0voAQCA4YMPPtDq1attNil7hvXChQvq3Lmz/vjjD2NzdHRUgwYNtHbtWqMPd3d349/Xrl3TH3/8oX/961+SpO3bt9+Tup999lmbz4sWLVJWVpY6duxoU29AQIAqVqxoU29+9enTx/i3j4+PKleuLA8PD3Xs2NHYX7lyZfn4+OjIkSO5zn/66adtZtCfe+45OTk56fvvv5ckrVmzRunp6RowYIAcHP7v/6r17dtXXl5e+u6772z6c3V1Vc+ePfNcv6urq9FvZmamzp49K7PZrMqVK9/w79OzZ0+5uLgYn5s0aSJJxrXt2LFDR48e1YABA3KtashZUXDu3Dn98MMP6tixoy5dumT8Pc6ePatWrVrp0KFD+u233yRl39M9e/bo0KFDeb4mAPinYAk9AAAw1K9f/4YvscsJU82aNbvheV5eXsa/z507p9GjR+vzzz/X6dOnbdqlpKQUYLX/56/L1A8dOiSr1aqKFSvesP2fA3R+uLm5qVixYjb7vL29VapUKSOs/nn/jZ5t/2tNZrNZgYGBOnbsmCTp+PHjkrK/BPgzFxcXlS9f3jieo2TJkjYB+3aysrL03nvv6cMPP9TRo0eVmZlpHPPz88vVvkyZMjafixYtKknGtR0+fFjSrX+t4JdffpHVatXIkSM1cuTIG7Y5ffq0SpYsqTFjxqht27aqVKmSqlevrqioKHXr1k01atTI8zUCwN8VAR4AANxWVlaWpOzn4AMCAnIdd3L6v/9L0bFjR23atElDhw5VrVq1ZDablZWVpaioKKOfW/lrEM7x56D5V3+e9c+p12Qyafny5XJ0dMzV3mw237aOG7lRX7fab/3/z+PfS3+99tsZP368Ro4cqV69eunNN9+Ur6+vHBwcNGDAgBv+fQri2nL6HTJkiFq1anXDNsHBwZKk8PBwHT58WEuWLNGqVas0a9YsvfPOO5oxY4bN6gcA+CciwAMAgNuqUKGCJKl48eJq0aLFTdudP39e8fHxGj16tF5//XVj/42WQ98sqOfM8P71jet/nXm+Xb1Wq1XlypVTpUqV8nze/XDo0CE1bdrU+Jyamqrk5GQ9+uijkqSyZctKkg4cOKDy5csb7dLT03X06NFb3v8/u9n9/eqrr9S0aVPNnj3bZv+FCxeMlwnmR85/G7t3775pbTnX4ezsnKf6fX191bNnT/Xs2VOpqakKDw/XqFGjCPAA/vF4Bh4AANxWq1at5OXlpfHjxysjIyPX8Zw3x+fM1v51dvbdd9/NdU7Ob7X/Nah7eXnJ399f69ats9n/4Ycf5rneJ598Uo6Ojho9enSuWqxWq81P2t1vH3/8sc09nD59uq5fv67WrVtLklq0aCEXFxe9//77NrXPnj1bKSkpeuyxx/I0joeHR657K2X/jf56TxYuXGg8g55ftWvXVrly5fTuu+/mGi9nnOLFiysyMlIfffSRkpOTc/Xx518e+Ovfxmw2Kzg4WGlpaXdUHwD8nTADDwAAbsvLy0vTp09Xt27dVLt2bXXq1EnFihXTiRMn9N1336lx48aaNm2avLy8jJ9Yy8jIUMmSJbVq1SodPXo0V5916tSRJI0YMUKdOnWSs7Oz2rRpIw8PD/Xp00cTJ05Unz59VLduXa1bt04HDx7Mc70VKlTQ2LFjNXz4cB07dkzt2rWTp6enjh49qm+++UZPP/20hgwZUmD3Jz/S09PVvHlzdezYUQcOHNCHH36osLAwPf7445Kyf0pv+PDhGj16tKKiovT4448b7erVq6euXbvmaZw6depo+vTpGjt2rIKDg1W8eHE1a9ZM0dHRGjNmjHr27KlGjRrp559/1vz5821m+/PDwcFB06dPV5s2bVSrVi317NlTgYGB2r9/v/bs2aOVK1dKyn5BYlhYmEJCQtS3b1+VL19ev//+uzZv3qxff/3V+B36atWqKTIyUnXq1JGvr6+2bt2qr776Sv369buj+gDg74QADwAA8uQ///mPSpQooYkTJ2ry5MlKS0tTyZIl1aRJE5u3oC9YsEAvvviiPvjgA1mtVj3yyCNavnx5rt8Xr1evnt58803NmDFDK1asUFZWlo4ePSoPDw+9/vrrOnPmjL766it9+eWXat26tZYvX67ixYvnud5hw4apUqVKeueddzR69GhJUunSpfXII48YYbkwTJs2TfPnz9frr7+ujIwMde7cWe+//77NkvdRo0apWLFimjZtmgYOHChfX189/fTTGj9+fJ5fwPf666/r+PHjmjRpki5duqSIiAg1a9ZMr776qi5fvqwFCxboiy++UO3atfXdd99p2LBhd3xNrVq10tq1azV69GhNnTpVWVlZqlChgvr27Wu0qVatmrZu3arRo0crLi5OZ8+eVfHixRUaGmrzuEX//v21dOlSrVq1SmlpaSpbtqzGjh2roUOH3nF9APB3YbLej7erAAAA/MPFxcWpZ8+eSkxMvOGb/gEAuB2egQcAAAAAwA4Q4AEAAAAAsAMEeAAAAAAA7ADP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ltcFAAAAAHeCAJ9PTZs2VVJSkpKSkvTTTz+pVatWat26tbG8unr16vL19VVCQoLWr1+v0NBQRUdHKyEhQVL2jHxkZKSk7Fnz9PR0NWjQwOjf19dXlStXznddQUFBNs+4BwYG6vTp03dxpdkiIyO1ceNGZWRkyGKxGLX/eaWBxWK55ey7JD388MNydHTMV32enp7Gvd6xY4fGjx+vZ599Vt9++63Rpm/fvvrss8907do1paena8GCBerVq9ct+925c6d++eUXeXp6Gl8Q+Pr66tq1azp8+LB8fX0VExOjVq1aqU2bNnrvvfduukpBkoYPH66UlBRjO3ny5C3HBwAAAIA74VTYBdgbDw8PBQcHG59nzZolb29vzZw5U2PHjpXJZDJmp11dXRUZGakaNWooLS1Nu3fv1qZNmzRkyJACr8vZ2dnms8lkUlZW1l3327RpU12+fFmJiYlau3athg4dKik7wPfq1Uvnzp3Tli1b9MwzzxR4fQ4ODjb3ukaNGlq1apXeeusttWnTRpLUpk0bubq66ptvvpGLi4syMjLUvn37W/abmpqqOnXqaP78+bmOFStWTFL2TH7//v21YsUKffHFF3rttde0evVq/etf/8p1jqurq1xdXW85JgAAAADcLWbg75LJZJKDg4OuXr1q7MuZnc6ZsXZwcFB4eLgmT56stLQ0NW7cWJJUoUIFOTs7a8uWLca558+f18GDB+953S4uLsrMzLxtuwoVKqh06dJaunSpkpKSFBERIUkqWbKkSpYsqalTpyo9Pf22M/AFxdHR0eZeOzk5qUePHoqNjVVsbKw6deokd3d34/iNrrN27do6dOiQihcvruDgYJvN29vbaBcaGqrhw4dr06ZNql69uhYsWHDvLxAAAAAAboIAn09paWk6deqUTp06pX379unFF19UamqqMSMs/d9z8Hv27FFYWJixb/78+apbt648PDwkZf/cWu/evTV06FD98MMP2r17t2JiYozn6e+loKAgrVu3Tr/99pv++OOPW7Zt2rSpPvzwQwUHB+uhhx4y9kdEROi///2v8bK7gma1Wo17ffToUX388cdauXKl2rZta9OuT58++uGHH7RixYpcy+eDgoK0a9cuHThwQH/88YcyMjLUpUsX+fv7q23btlq/fr2OHj0qi8Wi/v3769dff9XRo0c1fPhwbd68WcePH9eqVat0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/maqVKmiXbt2SZJOnDihgIAAtWjRQs7OzipTpozq168vSfL19ZWjo6Mxs55X6enpmjp1qlJSUtSsWTMtWLBA165d0yeffCIPDw9J0rRp09SmTRu99dZbeuihhyRJHh4emjVrllxcXIy+8jL+hAkTNHr06HzfBwAAAADIjzuagZ8+fboGDRqkRx99VBcuXFBmZqYkycfHhxd+4basVquxHL1Dhw66evWqypcvr759++qbb7654+fjX3nlFZnNZhUpUkRvvfWWJk6cqMcee0z79u1TzZo1jfAuSY0bN1ZWVpYOHDhg7AsJCbEJ73k1fPhwpaSkGNvJkyfvqH4AAAAAuJU7CvD//e9/NXPmTI0YMUKOjo7G/rp16+rnn38usOLw97Rv3z6VK1dOklS6dGkdOHBAH374odzd3fX8888rPDxcGRkZ+e536NChSkpK0q+//qrz58/rlVdeydf5fw74+eHq6iovLy+bDQAAAAAK2h0F+KNHjyo0NDTXfldXV12+fPmui8Lf1w8//KCff/5ZTz31lLHP3d1dbdq00fvvvy+LxaLNmzcbXwS5uLgYKzxux9/fX8HBwQoICLB54VzVqlW1c+dOm/82N27cKAcHB1WuXPmWfeZnfAAAAAC4l+4owJcrV05JSUm59q9YsUJVq1a925rwN5GWlqZTp07pt99+0/bt2zV+/Hi1bdtW0dHR6t69uyQpLi5Os2fP1u7du3XkyBF9+umncnd3V9myZSVl/w77unXr9Ntvv+mPP/64ozq6dOkiNzc39ejRQ7t379batWv14osvqlu3bsbz7zdTEOMDAAAAQEG4o5fYDRo0SC+88IKuXbsmq9Wqn376SZ999pkmTJigWbNmFXSNsFMrVqxQYGCgnJycVLRoUdWsWVPvv/++evToIQeH7O+OfHx8NHHiRA0aNEiZmZkKCQnRt99+Kz8/P0nZv+3+zDPPqEKFCkpLS5PVas13HUWKFNHKlSv10ksvqV69eipSpIieeuopvf3227c9tyDGBwAAAICCYLLeYSKZP3++Ro0apcOHD0uSSpQoodGjR6t3794FWiBgby5evChvb2+9se6I3MyehV0OAAAAHkDDQv0LuwTcBznZICUlpUDelZXvGfjr169rwYIFatWqlbp06aIrV64oNTVVxYsXv+tiAAAAAADAjeX7GXgnJyc9++yzunbtmqTs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BZmzZ89aXb7teXv+J0+eNJMnTzZut9s4nU7Tv39/k5eXZ5qamtpck8MYY9p+vh4AAAAAAPgCvwMPAAAAAIANEOABAAAAALABAjwAAAAAADZAgAcAAAAAwAYI8AAAAAAA2AABHgAAAAAAGyDAAwAAAABgAwR4AAAAAABsgAAPAAAAAIANEOABAICtTZ48Wd/5znd8XUaLjh07JofDoYqKCl+XAgDoAAjwAAAAFrh8+bKvSwAAdDAEeAAA0GGMGjVKDz/8sB555BHdcMMNioyMVEFBgS5cuKD77rtP3bp1U79+/fTGG280P2fLli1yOBwqKSlRQkKCnE6nRowYob1793oc+09/+pPi4+MVGBioPn36KC8vz+PxPn36aP78+Zo0aZJCQkL0wAMPqG/fvpKkIUOGyOFwaNSoUZKkd955R9/61rcUHh4ul8ul5ORk7d692+N4DodDy5Yt07hx43T99dcrJiZG69at81izb98+3X333QoJCVG3bt10++2368iRI82PL1u2THFxcXI6nRowYICWLFnypWcMAPAdAjwAAOhQVq1apfDwcO3cuVMPP/ywHnzwQX33u9/Vrbfeqt27dys1NVXZ2dn6+OOPPZ43c+ZM5eXl6Z133tGNN96oe+65Rw0NDZKkXbt2KTMzUxMmTNB7772np59+Wrm5uVq5cqXHMRYtWqTBgwervLxcubm52rlzpyRp48aNOnnypIqLiyVJdXV1ysnJ0d///neVlZUpJiZG6enpqqur8zje3LlzlZmZqT179ig9PV0TJ07U6dOnJUkfffSR7rjjDgUGBurNN9/Url279P3vf1//+c9/JEmvvPKKZs+erWeffVaVlZX62c9+ptzcXK1atcrrMwcAtA+HMcb4uggAAID/1+TJk3X27FmtWbNGo0aNUmNjo7Zu3SpJamxslMvl0vjx47V69WpJUlVVlXr27KnS0lKNGDFCW7Zs0Z133qmioiJlZWVJkk6fPq2oqCitXLlSmZmZmjhxov79739r/fr1zf/uT3/6U5WUlGjfvn2SPj0DP2TIEP35z39uXnPs2DH17dtX5eXluvnmm1vtoampSaGhofrd736nu+++W9KnZ+BnzZql+fPnS5IuXLigrl276o033lBaWpqefPJJFRUV6cCBA+rSpcvnjtmvXz/Nnz9f9957b/N9zzzzjF5//XVt3779/xk1AMDHOAMPAAA6lISEhOaP/fz8FBYWpkGDBjXfFxkZKUmqqanxeN7IkSObP+7evbv69++vyspKSVJlZaVuu+02j/W33XabDh06pMbGxub7brnlljbVWF1dralTpyomJkYul0shISGqr6/XiRMnWu0lODhYISEhzXVXVFTo9ttvbzG8X7hwQUeOHNGUKVPUtWvX5tszzzzj8SP2AAB78fd1AQAAAN702UDrcDg87nM4HJI+PevtbcHBwW1al5OTo9raWj3//POKjo5WYGCgRo4c+bkL37XUy5W6g4KCWj1+fX29JKmgoEBJSUkej/n5+bWpRgDAVw8BHgAAQFJZWZl69+4tSTpz5owOHjyouLg4SVJcXJy2bdvmsX7btm2KjY29aiAOCAiQJI+z9Feeu2TJEqWnp0uSPvjgA506deqa6k1ISNCqVavU0NDwuaAfGRkpt9ut999/XxMnTrym4wIAvroI8AAAAJLmzZunsLAwRUZG6qmnnlJ4eHjz+8vPmDFDw4YN0/z585WVlaXS0lL95je/+cKrukdERCgoKEh//etfFRUVJafTKZfLpZiYGP32t7/VLbfcovPnz2vmzJlXPaPekmnTpik/P18TJkzQE088IZfLpbKyMg0fPlz9+/fX3LlzNX36dLlcLqWlpenSpUt69913debMGT366KP/75gAAD7E78ADAABIWrBggX70ox8pMTFRVVVV+stf/tJ8Bn3o0KF69dVXVVRUpG984xuaPXu25s2bp8mTJ1/1mP7+/vr1r3+tpUuXyu12KyMjQ5JUWFioM2fOaOjQocrOztb06dMVERFxTfWGhYXpzTffVH19vZKTk5WYmKiCgoLms/H333+/li1bphUrVmjQoEFKTk7WypUrm9/aDgBgP1yFHgAAdGpXrkJ/5swZhYaG+rocAABaxRl4AAAAAABsgAAPAAAAAIAN8CP0AAAAAADYAGfgAQAAAACwAQI8AAAAAAA2QIAHAAAAAMAGCPAAAAAAANgAAR4AAAAAABsgwAMAAAAAYAMEeAAAAAAAbIAADwAAAACADfwXE7u/PWBVbVcAAAAASUVORK5CYII="},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"feature_importance_df.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T12:24:23.427220Z","iopub.execute_input":"2024-11-27T12:24:23.427639Z","iopub.status.idle":"2024-11-27T12:24:23.440609Z","shell.execute_reply.started":"2024-11-27T12:24:23.427602Z","shell.execute_reply":"2024-11-27T12:24:23.438855Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"                   Feature  Importance\n56    Bwd Segment Size Avg    0.076692\n66       Subflow Bwd Bytes    0.075514\n68      Bwd Init Win Bytes    0.071458\n12   Bwd Packet Length Max    0.071230\n1                 Dst Port    0.067756\n21            Flow IAT Min    0.065668\n37       Bwd Header Length    0.060867\n47          RST Flag Count    0.054664\n14  Bwd Packet Length Mean    0.054068\n38           Fwd Packets/s    0.031603","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Importance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>56</th>\n      <td>Bwd Segment Size Avg</td>\n      <td>0.076692</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>Subflow Bwd Bytes</td>\n      <td>0.075514</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>Bwd Init Win Bytes</td>\n      <td>0.071458</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Bwd Packet Length Max</td>\n      <td>0.071230</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Dst Port</td>\n      <td>0.067756</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Flow IAT Min</td>\n      <td>0.065668</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Bwd Header Length</td>\n      <td>0.060867</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>RST Flag Count</td>\n      <td>0.054664</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Bwd Packet Length Mean</td>\n      <td>0.054068</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Fwd Packets/s</td>\n      <td>0.031603</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"features = [\n    'Bwd Segment Size Avg',\n    'Subflow Bwd Bytes',\n    'Bwd Init Win Bytes',\n    'Bwd Packet Length Max',\n    'Dst Port',\n    'Flow IAT Min',\n    'Bwd Header Length',\n    'RST Flag Count',\n    'Bwd Packet Length Mean',\n    'Fwd Packets/s'\n]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:35:24.220130Z","iopub.execute_input":"2024-11-28T07:35:24.220667Z","iopub.status.idle":"2024-11-28T07:35:24.226379Z","shell.execute_reply.started":"2024-11-28T07:35:24.220626Z","shell.execute_reply":"2024-11-28T07:35:24.225118Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"X= df_encoded[features]\ny= df_encoded['Label']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:35:25.242588Z","iopub.execute_input":"2024-11-28T07:35:25.242962Z","iopub.status.idle":"2024-11-28T07:35:25.417745Z","shell.execute_reply.started":"2024-11-28T07:35:25.242929Z","shell.execute_reply":"2024-11-28T07:35:25.416546Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX= scaler.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:35:27.080653Z","iopub.execute_input":"2024-11-28T07:35:27.081022Z","iopub.status.idle":"2024-11-28T07:35:28.638059Z","shell.execute_reply.started":"2024-11-28T07:35:27.080991Z","shell.execute_reply":"2024-11-28T07:35:28.636513Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# output the same scaler\nimport pickle\nwith open('scaler.pkl', 'wb') as f:\n    pickle.dump(scaler, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:36:15.730803Z","iopub.execute_input":"2024-11-28T07:36:15.731643Z","iopub.status.idle":"2024-11-28T07:36:15.738330Z","shell.execute_reply.started":"2024-11-28T07:36:15.731601Z","shell.execute_reply":"2024-11-28T07:36:15.737005Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"X.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T15:48:33.642634Z","iopub.execute_input":"2024-11-27T15:48:33.643092Z","iopub.status.idle":"2024-11-27T15:48:33.653278Z","shell.execute_reply.started":"2024-11-27T15:48:33.643053Z","shell.execute_reply":"2024-11-27T15:48:33.651883Z"}},"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"(2694612, 10)"},"metadata":{}}],"execution_count":55},{"cell_type":"code","source":"y = y.map({'Benign':0, 'Malicious':1}).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:39:45.586639Z","iopub.execute_input":"2024-11-28T07:39:45.587050Z","iopub.status.idle":"2024-11-28T07:39:45.762712Z","shell.execute_reply.started":"2024-11-28T07:39:45.587017Z","shell.execute_reply":"2024-11-28T07:39:45.761622Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T15:49:30.103275Z","iopub.execute_input":"2024-11-27T15:49:30.103715Z","iopub.status.idle":"2024-11-27T15:49:30.118548Z","shell.execute_reply.started":"2024-11-27T15:49:30.103678Z","shell.execute_reply":"2024-11-27T15:49:30.116859Z"}},"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"0          0\n1          0\n2          0\n3          0\n4          0\n          ..\n6862270    1\n5984285    1\n5297148    1\n3876910    1\n2813507    1\nName: Label, Length: 2694612, dtype: int64"},"metadata":{}}],"execution_count":58},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:39:50.202159Z","iopub.execute_input":"2024-11-28T07:39:50.202577Z","iopub.status.idle":"2024-11-28T07:39:51.767188Z","shell.execute_reply.started":"2024-11-28T07:39:50.202542Z","shell.execute_reply":"2024-11-28T07:39:51.766152Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, BatchNormalization, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.regularizers import l2\n\n# Define the model\ndef build_model(input_shape):\n    model = Sequential()\n    \n    # Input layer\n    model.add(Dense(2048, activation='relu', input_shape=input_shape))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.3))\n    \n    # Hidden layers\n    model.add(Dense(1024, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.3))\n\n    model.add(Dense(512, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.3))\n    \n    model.add(Dense(256, activation='relu'))\n    model.add(Dense(128, activation='relu'))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dense(16, activation='relu'))\n    model.add(Dense(8, activation='relu'))\n    \n    # Output layer for binary classification\n    model.add(Dense(1, activation='sigmoid'))  # Sigmoid for binary classification\n    \n    # Compile the model\n    optimizer = Adam(learning_rate=0.001)\n    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n\n# Build the model\ninput_shape = (10,)  # 10 features\nmodel = build_model(input_shape)\nmodel.summary()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T15:49:48.432998Z","iopub.execute_input":"2024-11-27T15:49:48.434479Z","iopub.status.idle":"2024-11-27T15:49:48.642853Z","shell.execute_reply.started":"2024-11-27T15:49:48.434407Z","shell.execute_reply":"2024-11-27T15:49:48.641325Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:87: UserWarning:\n\nDo not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense_10 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │        \u001b[38;5;34m22,528\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │     \u001b[38;5;34m2,098,176\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │       \u001b[38;5;34m524,800\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_13 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m131,328\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_14 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_15 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_16 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_17 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)             │           \u001b[38;5;34m528\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_18 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)              │           \u001b[38;5;34m136\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_19 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m9\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │        <span style=\"color: #00af00; text-decoration-color: #00af00\">22,528</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,098,176</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">524,800</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_15 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_17 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_18 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,820,737\u001b[0m (10.76 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,820,737</span> (10.76 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,820,737\u001b[0m (10.76 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,820,737</span> (10.76 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":60},{"cell_type":"code","source":"from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n\n# Callbacks\nearly_stopping = EarlyStopping(\n    monitor='val_loss',  # Monitor validation loss\n    patience=4, \n    min_delta=0.0001, \n    restore_best_weights=True\n)\n\nreduce_lr = ReduceLROnPlateau(\n    monitor='val_loss',  # Monitor validation loss\n    factor=0.5, \n    patience=2, \n    min_lr=0.0001\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T15:50:13.939799Z","iopub.execute_input":"2024-11-27T15:50:13.940286Z","iopub.status.idle":"2024-11-27T15:50:13.947163Z","shell.execute_reply.started":"2024-11-27T15:50:13.940246Z","shell.execute_reply":"2024-11-27T15:50:13.945867Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"# Training the model\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_val, y_val),\n    batch_size=512,\n    epochs=100,\n    callbacks=[early_stopping, reduce_lr],\n    verbose=1  # Show epoch-by-epoch progress\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T15:50:16.513631Z","iopub.execute_input":"2024-11-27T15:50:16.514089Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m328s\u001b[0m 193ms/step - accuracy: 0.9657 - loss: 0.1456 - val_accuracy: 0.9867 - val_loss: 0.0702 - learning_rate: 0.0010\nEpoch 2/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m340s\u001b[0m 201ms/step - accuracy: 0.9879 - loss: 0.0615 - val_accuracy: 0.9924 - val_loss: 0.0411 - learning_rate: 0.0010\nEpoch 3/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m328s\u001b[0m 194ms/step - accuracy: 0.9925 - loss: 0.0366 - val_accuracy: 0.9926 - val_loss: 0.0323 - learning_rate: 0.0010\nEpoch 4/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m394s\u001b[0m 202ms/step - accuracy: 0.9927 - loss: 0.0319 - val_accuracy: 0.9928 - val_loss: 0.0303 - learning_rate: 0.0010\nEpoch 5/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m395s\u001b[0m 209ms/step - accuracy: 0.9930 - loss: 0.0299 - val_accuracy: 0.9930 - val_loss: 0.0308 - learning_rate: 0.0010\nEpoch 6/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m356s\u001b[0m 211ms/step - accuracy: 0.9931 - loss: 0.0282 - val_accuracy: 0.9936 - val_loss: 0.0223 - learning_rate: 0.0010\nEpoch 7/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m347s\u001b[0m 206ms/step - accuracy: 0.9936 - loss: 0.0227 - val_accuracy: 0.9940 - val_loss: 0.0210 - learning_rate: 0.0010\nEpoch 8/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m329s\u001b[0m 195ms/step - accuracy: 0.9940 - loss: 0.0214 - val_accuracy: 0.9945 - val_loss: 0.0199 - learning_rate: 0.0010\nEpoch 9/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m346s\u001b[0m 206ms/step - accuracy: 0.9944 - loss: 0.0205 - val_accuracy: 0.9947 - val_loss: 0.0197 - learning_rate: 0.0010\nEpoch 10/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m365s\u001b[0m 216ms/step - accuracy: 0.9947 - loss: 0.0201 - val_accuracy: 0.9950 - val_loss: 0.0194 - learning_rate: 0.0010\nEpoch 11/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m333s\u001b[0m 197ms/step - accuracy: 0.9946 - loss: 0.0200 - val_accuracy: 0.9950 - val_loss: 0.0191 - learning_rate: 0.0010\nEpoch 12/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m323s\u001b[0m 192ms/step - accuracy: 0.9947 - loss: 0.0198 - val_accuracy: 0.9929 - val_loss: 0.0263 - learning_rate: 0.0010\nEpoch 13/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m328s\u001b[0m 194ms/step - accuracy: 0.9948 - loss: 0.0198 - val_accuracy: 0.9947 - val_loss: 0.0204 - learning_rate: 0.0010\nEpoch 14/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m379s\u001b[0m 192ms/step - accuracy: 0.9954 - loss: 0.0182 - val_accuracy: 0.9954 - val_loss: 0.0184 - learning_rate: 5.0000e-04\nEpoch 15/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m326s\u001b[0m 193ms/step - accuracy: 0.9955 - loss: 0.0179 - val_accuracy: 0.9951 - val_loss: 0.0190 - learning_rate: 5.0000e-04\nEpoch 16/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m346s\u001b[0m 206ms/step - accuracy: 0.9952 - loss: 0.0188 - val_accuracy: 0.9950 - val_loss: 0.0192 - learning_rate: 5.0000e-04\nEpoch 17/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m327s\u001b[0m 194ms/step - accuracy: 0.9956 - loss: 0.0179 - val_accuracy: 0.9954 - val_loss: 0.0182 - learning_rate: 2.5000e-04\nEpoch 18/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m319s\u001b[0m 190ms/step - accuracy: 0.9956 - loss: 0.0179 - val_accuracy: 0.9954 - val_loss: 0.0182 - learning_rate: 2.5000e-04\nEpoch 19/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m346s\u001b[0m 205ms/step - accuracy: 0.9956 - loss: 0.0170 - val_accuracy: 0.9953 - val_loss: 0.0157 - learning_rate: 2.5000e-04\nEpoch 20/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m327s\u001b[0m 194ms/step - accuracy: 0.9956 - loss: 0.0150 - val_accuracy: 0.9955 - val_loss: 0.0144 - learning_rate: 2.5000e-04\nEpoch 21/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m345s\u001b[0m 204ms/step - accuracy: 0.9956 - loss: 0.0140 - val_accuracy: 0.9955 - val_loss: 0.0136 - learning_rate: 2.5000e-04\nEpoch 22/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m341s\u001b[0m 202ms/step - accuracy: 0.9956 - loss: 0.0134 - val_accuracy: 0.9957 - val_loss: 0.0129 - learning_rate: 2.5000e-04\nEpoch 23/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m346s\u001b[0m 205ms/step - accuracy: 0.9958 - loss: 0.0121 - val_accuracy: 0.9956 - val_loss: 0.0124 - learning_rate: 2.5000e-04\nEpoch 24/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m337s\u001b[0m 200ms/step - accuracy: 0.9957 - loss: 0.0113 - val_accuracy: 0.9955 - val_loss: 0.0113 - learning_rate: 2.5000e-04\nEpoch 25/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m351s\u001b[0m 208ms/step - accuracy: 0.9956 - loss: 0.0110 - val_accuracy: 0.9955 - val_loss: 0.0106 - learning_rate: 2.5000e-04\nEpoch 26/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m333s\u001b[0m 197ms/step - accuracy: 0.9957 - loss: 0.0102 - val_accuracy: 0.9957 - val_loss: 0.0100 - learning_rate: 2.5000e-04\nEpoch 27/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m332s\u001b[0m 197ms/step - accuracy: 0.9957 - loss: 0.0096 - val_accuracy: 0.9955 - val_loss: 0.0096 - learning_rate: 2.5000e-04\nEpoch 28/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m330s\u001b[0m 196ms/step - accuracy: 0.9958 - loss: 0.0088 - val_accuracy: 0.9956 - val_loss: 0.0087 - learning_rate: 2.5000e-04\nEpoch 29/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m334s\u001b[0m 198ms/step - accuracy: 0.9957 - loss: 0.0083 - val_accuracy: 0.9955 - val_loss: 0.0082 - learning_rate: 2.5000e-04\nEpoch 30/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m349s\u001b[0m 207ms/step - accuracy: 0.9958 - loss: 0.0076 - val_accuracy: 0.9958 - val_loss: 0.0075 - learning_rate: 2.5000e-04\nEpoch 31/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m335s\u001b[0m 199ms/step - accuracy: 0.9958 - loss: 0.0071 - val_accuracy: 0.9957 - val_loss: 0.0070 - learning_rate: 2.5000e-04\nEpoch 32/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m339s\u001b[0m 201ms/step - accuracy: 0.9958 - loss: 0.0067 - val_accuracy: 0.9957 - val_loss: 0.0067 - learning_rate: 2.5000e-04\nEpoch 33/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m367s\u001b[0m 192ms/step - accuracy: 0.9958 - loss: 0.0064 - val_accuracy: 0.9982 - val_loss: 0.0062 - learning_rate: 2.5000e-04\nEpoch 34/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m326s\u001b[0m 193ms/step - accuracy: 0.9982 - loss: 0.0060 - val_accuracy: 0.9976 - val_loss: 0.0086 - learning_rate: 2.5000e-04\nEpoch 35/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m325s\u001b[0m 193ms/step - accuracy: 0.9980 - loss: 0.0062 - val_accuracy: 0.9979 - val_loss: 0.0060 - learning_rate: 2.5000e-04\nEpoch 36/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m335s\u001b[0m 199ms/step - accuracy: 0.9980 - loss: 0.0056 - val_accuracy: 0.9981 - val_loss: 0.0055 - learning_rate: 2.5000e-04\nEpoch 37/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m340s\u001b[0m 202ms/step - accuracy: 0.9981 - loss: 0.0056 - val_accuracy: 0.9977 - val_loss: 0.0057 - learning_rate: 2.5000e-04\nEpoch 38/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m330s\u001b[0m 195ms/step - accuracy: 0.9981 - loss: 0.0052 - val_accuracy: 0.9981 - val_loss: 0.0054 - learning_rate: 2.5000e-04\nEpoch 39/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m341s\u001b[0m 202ms/step - accuracy: 0.9981 - loss: 0.0051 - val_accuracy: 0.9979 - val_loss: 0.0054 - learning_rate: 2.5000e-04\nEpoch 40/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m409s\u001b[0m 218ms/step - accuracy: 0.9982 - loss: 0.0049 - val_accuracy: 0.9982 - val_loss: 0.0051 - learning_rate: 2.5000e-04\nEpoch 41/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m340s\u001b[0m 193ms/step - accuracy: 0.9981 - loss: 0.0052 - val_accuracy: 0.9982 - val_loss: 0.0048 - learning_rate: 2.5000e-04\nEpoch 42/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m317s\u001b[0m 188ms/step - accuracy: 0.9982 - loss: 0.0047 - val_accuracy: 0.9981 - val_loss: 0.0049 - learning_rate: 2.5000e-04\nEpoch 43/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m318s\u001b[0m 189ms/step - accuracy: 0.9982 - loss: 0.0048 - val_accuracy: 0.9981 - val_loss: 0.0048 - learning_rate: 2.5000e-04\nEpoch 44/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m326s\u001b[0m 191ms/step - accuracy: 0.9984 - loss: 0.0042 - val_accuracy: 0.9983 - val_loss: 0.0046 - learning_rate: 1.2500e-04\nEpoch 45/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m357s\u001b[0m 212ms/step - accuracy: 0.9983 - loss: 0.0043 - val_accuracy: 0.9985 - val_loss: 0.0044 - learning_rate: 1.2500e-04\nEpoch 46/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m319s\u001b[0m 190ms/step - accuracy: 0.9984 - loss: 0.0043 - val_accuracy: 0.9986 - val_loss: 0.0043 - learning_rate: 1.2500e-04\nEpoch 47/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m318s\u001b[0m 189ms/step - accuracy: 0.9985 - loss: 0.0042 - val_accuracy: 0.9988 - val_loss: 0.0042 - learning_rate: 1.2500e-04\nEpoch 48/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m323s\u001b[0m 189ms/step - accuracy: 0.9985 - loss: 0.0040 - val_accuracy: 0.9985 - val_loss: 0.0041 - learning_rate: 1.2500e-04\nEpoch 49/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m330s\u001b[0m 196ms/step - accuracy: 0.9987 - loss: 0.0038 - val_accuracy: 0.9984 - val_loss: 0.0042 - learning_rate: 1.2500e-04\nEpoch 50/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 190ms/step - accuracy: 0.9988 - loss: 0.0036 - val_accuracy: 0.9985 - val_loss: 0.0043 - learning_rate: 1.2500e-04\nEpoch 51/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m317s\u001b[0m 188ms/step - accuracy: 0.9989 - loss: 0.0033 - val_accuracy: 0.9991 - val_loss: 0.0036 - learning_rate: 1.0000e-04\nEpoch 52/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m316s\u001b[0m 188ms/step - accuracy: 0.9991 - loss: 0.0030 - val_accuracy: 0.9989 - val_loss: 0.0036 - learning_rate: 1.0000e-04\nEpoch 53/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 190ms/step - accuracy: 0.9992 - loss: 0.0028 - val_accuracy: 0.9984 - val_loss: 0.0042 - learning_rate: 1.0000e-04\nEpoch 54/100\n\u001b[1m1685/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m335s\u001b[0m 199ms/step - accuracy: 0.9990 - loss: 0.0031 - val_accuracy: 0.9995 - val_loss: 0.0024 - learning_rate: 1.0000e-04\nEpoch 55/100\n\u001b[1m1535/1685\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m26s\u001b[0m 175ms/step - accuracy: 0.9992 - loss: 0.0026","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"# Save Model\nmodel.save('/kaggle/working/keras_model_00.h5')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load Model and Scaler\nfrom tensorflow.keras.models import load_model\nimport pickle\n\nmodel = load_model('/kaggle/input/keras_00_feature/keras/default/1/keras_model.h5')\n# Load the scaler\nwith open('/kaggle/working/scaler.pkl', 'rb') as f:\n    scaler = pickle.load(f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:39:08.786637Z","iopub.execute_input":"2024-11-28T07:39:08.787045Z","iopub.status.idle":"2024-11-28T07:39:09.398256Z","shell.execute_reply.started":"2024-11-28T07:39:08.786994Z","shell.execute_reply":"2024-11-28T07:39:09.396973Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"pred = model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:40:05.747018Z","iopub.execute_input":"2024-11-28T07:40:05.747405Z","iopub.status.idle":"2024-11-28T07:41:47.767768Z","shell.execute_reply.started":"2024-11-28T07:40:05.747370Z","shell.execute_reply":"2024-11-28T07:41:47.766382Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m16842/16842\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m94s\u001b[0m 6ms/step\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix\npreds_labels = (pred > 0.25).astype(int)\ntarget_names = ['Benign', 'Malicious']\nprint(classification_report(y_test, preds_labels, target_names=target_names), '\\n')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:45:09.091941Z","iopub.execute_input":"2024-11-28T07:45:09.092327Z","iopub.status.idle":"2024-11-28T07:45:10.106543Z","shell.execute_reply.started":"2024-11-28T07:45:09.092292Z","shell.execute_reply":"2024-11-28T07:45:10.105330Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n      Benign       0.94      0.78      0.85    106053\n   Malicious       0.95      0.99      0.97    432870\n\n    accuracy                           0.95    538923\n   macro avg       0.94      0.88      0.91    538923\nweighted avg       0.95      0.95      0.95    538923\n \n\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\ncf_matrix = confusion_matrix(y_test, preds_labels)\n# Create a heatmap using Seaborn\nplt.figure(figsize=(8, 6))\nsns.heatmap(cf_matrix, annot=True, cmap='Blues', fmt='.1f')\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T07:48:56.018999Z","iopub.execute_input":"2024-11-28T07:48:56.019410Z","iopub.status.idle":"2024-11-28T07:48:56.393023Z","shell.execute_reply.started":"2024-11-28T07:48:56.019373Z","shell.execute_reply":"2024-11-28T07:48:56.391786Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":34},{"cell_type":"markdown","source":"# Re-train The Model","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv('/kaggle/input/tii2023-cic2017-benign-malicious/combined_tii2023_and_cicids2017.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:35:10.521872Z","iopub.execute_input":"2024-11-30T06:35:10.522339Z","iopub.status.idle":"2024-11-30T06:37:30.202915Z","shell.execute_reply.started":"2024-11-30T06:35:10.522293Z","shell.execute_reply":"2024-11-30T06:37:30.201026Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Separate Benign and Malicious\nbenign_df = df[df['Label'] == 'Benign']\nmalicious_df = df[df['Label'] == 'Malicious']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:30.205861Z","iopub.execute_input":"2024-11-30T06:37:30.206342Z","iopub.status.idle":"2024-11-30T06:37:34.289722Z","shell.execute_reply.started":"2024-11-30T06:37:30.206293Z","shell.execute_reply":"2024-11-30T06:37:34.288682Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"malicious_downsampled = malicious_df.sample(frac=0.10, random_state=42)\nreduced_df = pd.concat([benign_df, malicious_downsampled])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:34.290997Z","iopub.execute_input":"2024-11-30T06:37:34.291339Z","iopub.status.idle":"2024-11-30T06:37:36.482960Z","shell.execute_reply.started":"2024-11-30T06:37:34.291306Z","shell.execute_reply":"2024-11-30T06:37:36.481933Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"df_encoded = reduced_df.join(pd.get_dummies(reduced_df['Label'], prefix='Label'))\ndf_encoded.drop(columns=['Unnamed: 0'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:36.485097Z","iopub.execute_input":"2024-11-30T06:37:36.485444Z","iopub.status.idle":"2024-11-30T06:37:38.100687Z","shell.execute_reply.started":"2024-11-30T06:37:36.485410Z","shell.execute_reply":"2024-11-30T06:37:38.099478Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"reduced_df['Label'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:38.102085Z","iopub.execute_input":"2024-11-30T06:37:38.102511Z","iopub.status.idle":"2024-11-30T06:37:38.225008Z","shell.execute_reply.started":"2024-11-30T06:37:38.102467Z","shell.execute_reply":"2024-11-30T06:37:38.223841Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"Label\nMalicious    865547\nBenign       530746\nName: count, dtype: int64"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n# Separate features (X) and target (y)\nX = reduced_df.drop(columns=['Label', 'Unnamed: 0']) \ny = reduced_df['Label'].map({'Benign': 0, 'Malicious': 1})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:38.226368Z","iopub.execute_input":"2024-11-30T06:37:38.226729Z","iopub.status.idle":"2024-11-30T06:37:38.884451Z","shell.execute_reply.started":"2024-11-30T06:37:38.226696Z","shell.execute_reply":"2024-11-30T06:37:38.883454Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Scale Features\nprint(\"\\nScaling features...\")\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:38.885887Z","iopub.execute_input":"2024-11-30T06:37:38.886235Z","iopub.status.idle":"2024-11-30T06:37:40.170794Z","shell.execute_reply.started":"2024-11-30T06:37:38.886199Z","shell.execute_reply":"2024-11-30T06:37:40.169475Z"}},"outputs":[{"name":"stdout","text":"\nScaling features...\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# Train Random Forest and Extract Feature Importances\nprint(\"\\nTraining Random Forest for feature importance extraction...\")\nrf = RandomForestClassifier(random_state=42, n_estimators=100)\nrf.fit(X_scaled, y)\n\n# Extract Feature Importances\nfeature_names = X.columns\nimportances = rf.feature_importances_\nfeature_importance_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': importances\n}).sort_values(by='Importance', ascending=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T10:12:07.285142Z","iopub.execute_input":"2024-11-28T10:12:07.285585Z","iopub.status.idle":"2024-11-28T10:17:45.427204Z","shell.execute_reply.started":"2024-11-28T10:12:07.285548Z","shell.execute_reply":"2024-11-28T10:17:45.425940Z"}},"outputs":[{"name":"stdout","text":"\nTraining Random Forest for feature importance extraction...\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# Print Feature Importances\nprint(\"\\nFeature importances:\")\nprint(feature_importance_df.head(10))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T10:17:45.429412Z","iopub.execute_input":"2024-11-28T10:17:45.429807Z","iopub.status.idle":"2024-11-28T10:17:45.439111Z","shell.execute_reply.started":"2024-11-28T10:17:45.429756Z","shell.execute_reply":"2024-11-28T10:17:45.437661Z"}},"outputs":[{"name":"stdout","text":"\nFeature importances:\n                   Feature  Importance\n47          RST Flag Count    0.117456\n1                 Dst Port    0.108180\n12   Bwd Packet Length Max    0.068913\n14  Bwd Packet Length Mean    0.062330\n68      Bwd Init Win Bytes    0.054552\n21            Flow IAT Min    0.052369\n9    Fwd Packet Length Min    0.051209\n56    Bwd Segment Size Avg    0.049667\n65     Subflow Bwd Packets    0.045022\n67      FWD Init Win Bytes    0.037048\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"top_feature = feature_importance_df.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T10:17:45.440588Z","iopub.execute_input":"2024-11-28T10:17:45.441033Z","iopub.status.idle":"2024-11-28T10:17:45.459908Z","shell.execute_reply.started":"2024-11-28T10:17:45.440996Z","shell.execute_reply":"2024-11-28T10:17:45.458383Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# Plot Feature Importances\ndef plot_feature_importances(feature_importance_df):\n    plt.figure(figsize=(10, 6))\n    plt.barh(top_feature['Feature'], top_feature['Importance'], color='skyblue')\n    plt.xlabel('Importance')\n    plt.ylabel('Feature')\n    plt.title('Feature Importances')\n    plt.gca().invert_yaxis()  # Invert y-axis for better readability\n    plt.show()\n\nplot_feature_importances(feature_importance_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T10:19:05.213634Z","iopub.execute_input":"2024-11-28T10:19:05.214277Z","iopub.status.idle":"2024-11-28T10:19:05.554396Z","shell.execute_reply.started":"2024-11-28T10:19:05.214211Z","shell.execute_reply":"2024-11-28T10:19:05.552637Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"np.array(top_feature)[:,:-1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T10:20:55.287082Z","iopub.execute_input":"2024-11-28T10:20:55.287506Z","iopub.status.idle":"2024-11-28T10:20:55.296170Z","shell.execute_reply.started":"2024-11-28T10:20:55.287472Z","shell.execute_reply":"2024-11-28T10:20:55.294605Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"array([['RST Flag Count'],\n       ['Dst Port'],\n       ['Bwd Packet Length Max'],\n       ['Bwd Packet Length Mean'],\n       ['Bwd Init Win Bytes'],\n       ['Flow IAT Min'],\n       ['Fwd Packet Length Min'],\n       ['Bwd Segment Size Avg'],\n       ['Subflow Bwd Packets'],\n       ['FWD Init Win Bytes']], dtype=object)"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"features = [\n    'RST Flag Count',\n    'Dst Port',\n    'Bwd Packet Length Max',\n    'Bwd Packet Length Mean',\n    'Bwd Init Win Bytes',\n    'Flow IAT Min',\n    'Fwd Packet Length Min',\n    'Bwd Segment Size Avg',\n    'Subflow Bwd Packets',\n    'FWD Init Win Bytes'\n]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:40.172100Z","iopub.execute_input":"2024-11-30T06:37:40.172423Z","iopub.status.idle":"2024-11-30T06:37:40.178127Z","shell.execute_reply.started":"2024-11-30T06:37:40.172393Z","shell.execute_reply":"2024-11-30T06:37:40.176681Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Separate Feature and Target\nX= df_encoded[features]\ny= df_encoded['Label']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:40.179946Z","iopub.execute_input":"2024-11-30T06:37:40.180455Z","iopub.status.idle":"2024-11-30T06:37:40.220071Z","shell.execute_reply.started":"2024-11-30T06:37:40.180383Z","shell.execute_reply":"2024-11-30T06:37:40.218977Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# Scale and Output the Scaler\nX = scaler.fit_transform(X)\nimport pickle\n#with open('scaler_01.pkl', 'wb') as f:\n    #pickle.dump(scaler, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:40.222770Z","iopub.execute_input":"2024-11-30T06:37:40.223121Z","iopub.status.idle":"2024-11-30T06:37:40.368748Z","shell.execute_reply.started":"2024-11-30T06:37:40.223087Z","shell.execute_reply":"2024-11-30T06:37:40.367158Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Convert to Binary\ny = y.map({'Benign':0, 'Malicious':1}).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:40.370294Z","iopub.execute_input":"2024-11-30T06:37:40.370681Z","iopub.status.idle":"2024-11-30T06:37:40.463433Z","shell.execute_reply.started":"2024-11-30T06:37:40.370641Z","shell.execute_reply":"2024-11-30T06:37:40.462226Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# Splitting Data for Train, Test, and Validate\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:40.465421Z","iopub.execute_input":"2024-11-30T06:37:40.466300Z","iopub.status.idle":"2024-11-30T06:37:41.028174Z","shell.execute_reply.started":"2024-11-30T06:37:40.466251Z","shell.execute_reply":"2024-11-30T06:37:41.026833Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, BatchNormalization, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.regularizers import l2\n\n# Define the model\ndef build_model(input_shape):\n    model = Sequential()\n    \n    # Input layer\n    model.add(Dense(2048, activation='relu', input_shape=input_shape))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.3))\n    \n    # Hidden layers\n    model.add(Dense(1024, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.3))\n\n    model.add(Dense(512, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.3))\n    \n    model.add(Dense(256, activation='relu'))\n    model.add(Dense(128, activation='relu'))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dense(16, activation='relu'))\n    model.add(Dense(8, activation='relu'))\n    \n    # Output layer for binary classification\n    model.add(Dense(1, activation='sigmoid'))  # Sigmoid for binary classification\n    \n    # Compile the model\n    optimizer = Adam(learning_rate=0.001)\n    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n\n# Build the model\ninput_shape = (10,)  # 10 features\nmodel = build_model(input_shape)\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T10:24:37.773396Z","iopub.execute_input":"2024-11-28T10:24:37.773832Z","iopub.status.idle":"2024-11-28T10:24:55.711330Z","shell.execute_reply.started":"2024-11-28T10:24:37.773797Z","shell.execute_reply":"2024-11-28T10:24:55.709840Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │        \u001b[38;5;34m22,528\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │         \u001b[38;5;34m8,192\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │     \u001b[38;5;34m2,098,176\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │         \u001b[38;5;34m4,096\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │       \u001b[38;5;34m524,800\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │         \u001b[38;5;34m2,048\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m131,328\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)             │           \u001b[38;5;34m528\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)              │           \u001b[38;5;34m136\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m9\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │        <span style=\"color: #00af00; text-decoration-color: #00af00\">22,528</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,192</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,098,176</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">4,096</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">524,800</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,835,073\u001b[0m (10.81 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,835,073</span> (10.81 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,827,905\u001b[0m (10.79 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,827,905</span> (10.79 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m7,168\u001b[0m (28.00 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">7,168</span> (28.00 KB)\n</pre>\n"},"metadata":{}}],"execution_count":52},{"cell_type":"code","source":"from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n# Callbacks\nearly_stopping = EarlyStopping(\n    monitor='val_loss',  # Monitor validation loss\n    patience=4, \n    min_delta=0.0001, \n    restore_best_weights=True\n)\n\nreduce_lr = ReduceLROnPlateau(\n    monitor='val_loss',  # Monitor validation loss\n    factor=0.5, \n    patience=2, \n    min_lr=0.0001\n    ]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T10:25:53.303157Z","iopub.execute_input":"2024-11-28T10:25:53.304021Z","iopub.status.idle":"2024-11-28T10:25:53.315211Z","shell.execute_reply.started":"2024-11-28T10:25:53.303977Z","shell.execute_reply":"2024-11-28T10:25:53.313508Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"# Training the model\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_val, y_val),\n    batch_size=512,\n    epochs=100,\n    callbacks=[early_stopping, reduce_lr],\n    verbose=1  # Show epoch-by-epoch progress\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T10:27:11.890252Z","iopub.execute_input":"2024-11-28T10:27:11.890744Z","iopub.status.idle":"2024-11-28T12:34:15.448349Z","shell.execute_reply.started":"2024-11-28T10:27:11.890708Z","shell.execute_reply":"2024-11-28T12:34:15.445069Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m254s\u001b[0m 142ms/step - accuracy: 0.9849 - loss: 0.0465 - val_accuracy: 0.9944 - val_loss: 0.0200 - learning_rate: 0.0010\nEpoch 2/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m248s\u001b[0m 142ms/step - accuracy: 0.9946 - loss: 0.0173 - val_accuracy: 0.9912 - val_loss: 0.0258 - learning_rate: 0.0010\nEpoch 3/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m260s\u001b[0m 149ms/step - accuracy: 0.9959 - loss: 0.0127 - val_accuracy: 0.9962 - val_loss: 0.0128 - learning_rate: 0.0010\nEpoch 4/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m255s\u001b[0m 146ms/step - accuracy: 0.9965 - loss: 0.0108 - val_accuracy: 0.9973 - val_loss: 0.0102 - learning_rate: 0.0010\nEpoch 5/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m257s\u001b[0m 147ms/step - accuracy: 0.9969 - loss: 0.0096 - val_accuracy: 0.9964 - val_loss: 0.0104 - learning_rate: 0.0010\nEpoch 6/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m242s\u001b[0m 139ms/step - accuracy: 0.9971 - loss: 0.0090 - val_accuracy: 0.9977 - val_loss: 0.0081 - learning_rate: 0.0010\nEpoch 7/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m240s\u001b[0m 137ms/step - accuracy: 0.9974 - loss: 0.0081 - val_accuracy: 0.9979 - val_loss: 0.0064 - learning_rate: 0.0010\nEpoch 8/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m253s\u001b[0m 145ms/step - accuracy: 0.9977 - loss: 0.0074 - val_accuracy: 0.9967 - val_loss: 0.0123 - learning_rate: 0.0010\nEpoch 9/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m252s\u001b[0m 144ms/step - accuracy: 0.9978 - loss: 0.0070 - val_accuracy: 0.9974 - val_loss: 0.0078 - learning_rate: 0.0010\nEpoch 10/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m254s\u001b[0m 145ms/step - accuracy: 0.9984 - loss: 0.0051 - val_accuracy: 0.9987 - val_loss: 0.0041 - learning_rate: 5.0000e-04\nEpoch 11/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m255s\u001b[0m 146ms/step - accuracy: 0.9986 - loss: 0.0045 - val_accuracy: 0.9988 - val_loss: 0.0038 - learning_rate: 5.0000e-04\nEpoch 12/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m252s\u001b[0m 145ms/step - accuracy: 0.9987 - loss: 0.0042 - val_accuracy: 0.9990 - val_loss: 0.0032 - learning_rate: 5.0000e-04\nEpoch 13/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m249s\u001b[0m 142ms/step - accuracy: 0.9988 - loss: 0.0039 - val_accuracy: 0.9987 - val_loss: 0.0037 - learning_rate: 5.0000e-04\nEpoch 14/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m248s\u001b[0m 142ms/step - accuracy: 0.9988 - loss: 0.0037 - val_accuracy: 0.9992 - val_loss: 0.0031 - learning_rate: 5.0000e-04\nEpoch 15/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m243s\u001b[0m 139ms/step - accuracy: 0.9988 - loss: 0.0037 - val_accuracy: 0.9989 - val_loss: 0.0032 - learning_rate: 5.0000e-04\nEpoch 16/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m248s\u001b[0m 142ms/step - accuracy: 0.9988 - loss: 0.0036 - val_accuracy: 0.9979 - val_loss: 0.0063 - learning_rate: 5.0000e-04\nEpoch 17/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m242s\u001b[0m 138ms/step - accuracy: 0.9990 - loss: 0.0031 - val_accuracy: 0.9990 - val_loss: 0.0029 - learning_rate: 2.5000e-04\nEpoch 18/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m242s\u001b[0m 139ms/step - accuracy: 0.9990 - loss: 0.0030 - val_accuracy: 0.9992 - val_loss: 0.0026 - learning_rate: 2.5000e-04\nEpoch 19/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m241s\u001b[0m 138ms/step - accuracy: 0.9991 - loss: 0.0028 - val_accuracy: 0.9992 - val_loss: 0.0025 - learning_rate: 2.5000e-04\nEpoch 20/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m240s\u001b[0m 137ms/step - accuracy: 0.9992 - loss: 0.0025 - val_accuracy: 0.9992 - val_loss: 0.0024 - learning_rate: 2.5000e-04\nEpoch 21/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m242s\u001b[0m 139ms/step - accuracy: 0.9991 - loss: 0.0028 - val_accuracy: 0.9993 - val_loss: 0.0021 - learning_rate: 2.5000e-04\nEpoch 22/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m241s\u001b[0m 138ms/step - accuracy: 0.9991 - loss: 0.0025 - val_accuracy: 0.9992 - val_loss: 0.0024 - learning_rate: 2.5000e-04\nEpoch 23/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m240s\u001b[0m 137ms/step - accuracy: 0.9991 - loss: 0.0027 - val_accuracy: 0.9993 - val_loss: 0.0022 - learning_rate: 2.5000e-04\nEpoch 24/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m244s\u001b[0m 139ms/step - accuracy: 0.9991 - loss: 0.0025 - val_accuracy: 0.9994 - val_loss: 0.0019 - learning_rate: 1.2500e-04\nEpoch 25/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m240s\u001b[0m 138ms/step - accuracy: 0.9993 - loss: 0.0021 - val_accuracy: 0.9994 - val_loss: 0.0019 - learning_rate: 1.2500e-04\nEpoch 26/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m238s\u001b[0m 136ms/step - accuracy: 0.9993 - loss: 0.0021 - val_accuracy: 0.9994 - val_loss: 0.0019 - learning_rate: 1.2500e-04\nEpoch 27/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m243s\u001b[0m 139ms/step - accuracy: 0.9993 - loss: 0.0021 - val_accuracy: 0.9994 - val_loss: 0.0018 - learning_rate: 1.0000e-04\nEpoch 28/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m240s\u001b[0m 137ms/step - accuracy: 0.9993 - loss: 0.0020 - val_accuracy: 0.9994 - val_loss: 0.0018 - learning_rate: 1.0000e-04\nEpoch 29/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m239s\u001b[0m 137ms/step - accuracy: 0.9993 - loss: 0.0020 - val_accuracy: 0.9994 - val_loss: 0.0018 - learning_rate: 1.0000e-04\nEpoch 30/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m242s\u001b[0m 138ms/step - accuracy: 0.9994 - loss: 0.0020 - val_accuracy: 0.9994 - val_loss: 0.0018 - learning_rate: 1.0000e-04\nEpoch 31/100\n\u001b[1m1746/1746\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m240s\u001b[0m 137ms/step - accuracy: 0.9993 - loss: 0.0020 - val_accuracy: 0.9995 - val_loss: 0.0018 - learning_rate: 1.0000e-04\n","output_type":"stream"}],"execution_count":54},{"cell_type":"code","source":"# Save Model\nmodel.save('/kaggle/working/keras_model_01.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T12:34:15.453075Z","iopub.execute_input":"2024-11-28T12:34:15.453716Z","iopub.status.idle":"2024-11-28T12:34:15.592347Z","shell.execute_reply.started":"2024-11-28T12:34:15.453634Z","shell.execute_reply":"2024-11-28T12:34:15.591018Z"}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"pred = loaded_model_01.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:37:41.029427Z","iopub.execute_input":"2024-11-30T06:37:41.029792Z","iopub.status.idle":"2024-11-30T06:38:36.736443Z","shell.execute_reply.started":"2024-11-30T06:37:41.029758Z","shell.execute_reply":"2024-11-30T06:38:36.735464Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m8727/8727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m52s\u001b[0m 6ms/step\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix\npreds_labels = (pred > 0.25).astype(int)\ntarget_names = ['Benign', 'Malicious']\nprint(classification_report(y_test, preds_labels, target_names=target_names, digits=4), '\\n')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T06:39:01.156603Z","iopub.execute_input":"2024-11-30T06:39:01.156997Z","iopub.status.idle":"2024-11-30T06:39:01.746685Z","shell.execute_reply.started":"2024-11-30T06:39:01.156966Z","shell.execute_reply":"2024-11-30T06:39:01.745339Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n      Benign     0.9998    0.9987    0.9993    105520\n   Malicious     0.9992    0.9999    0.9996    173739\n\n    accuracy                         0.9995    279259\n   macro avg     0.9995    0.9993    0.9994    279259\nweighted avg     0.9995    0.9995    0.9995    279259\n \n\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\ncf_matrix = confusion_matrix(y_test, preds_labels)\n# Create a heatmap using Seaborn\nplt.figure(figsize=(8, 6))\nsns.heatmap(cf_matrix, annot=True, cmap='Blues', fmt='.1f')\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T12:42:03.045848Z","iopub.execute_input":"2024-11-28T12:42:03.046223Z","iopub.status.idle":"2024-11-28T12:42:03.888129Z","shell.execute_reply.started":"2024-11-28T12:42:03.046190Z","shell.execute_reply":"2024-11-28T12:42:03.886859Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":62},{"cell_type":"markdown","source":"# Testing Model","metadata":{}},{"cell_type":"markdown","source":"## Testing Model 00","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom tensorflow.keras.models import load_model\nimport pickle","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:06:13.877094Z","iopub.execute_input":"2024-12-01T07:06:13.877692Z","iopub.status.idle":"2024-12-01T07:06:29.303191Z","shell.execute_reply.started":"2024-12-01T07:06:13.877634Z","shell.execute_reply":"2024-12-01T07:06:29.301950Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Load the saved model\nloaded_model_00 = load_model('/kaggle/input/keras_00_feature/keras/default/1/keras_model.h5')\n# Load the scaler\nwith open('/kaggle/input/keras/keras/default/1/min_max_scaler.pkl', 'rb') as f:\n    scaler_00 = pickle.load(f)\n# Verify the model structure\nloaded_model_00.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:06:29.304932Z","iopub.execute_input":"2024-12-01T07:06:29.305507Z","iopub.status.idle":"2024-12-01T07:06:30.648534Z","shell.execute_reply.started":"2024-12-01T07:06:29.305472Z","shell.execute_reply":"2024-12-01T07:06:30.647222Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │        \u001b[38;5;34m22,528\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │         \u001b[38;5;34m8,192\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │     \u001b[38;5;34m2,098,176\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │         \u001b[38;5;34m4,096\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │       \u001b[38;5;34m524,800\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │         \u001b[38;5;34m2,048\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m131,328\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)             │           \u001b[38;5;34m528\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)              │           \u001b[38;5;34m136\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m9\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │        <span style=\"color: #00af00; text-decoration-color: #00af00\">22,528</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,192</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,098,176</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">4,096</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">524,800</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,835,075\u001b[0m (10.81 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,835,075</span> (10.81 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,827,905\u001b[0m (10.79 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,827,905</span> (10.79 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m7,168\u001b[0m (28.00 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">7,168</span> (28.00 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m2\u001b[0m (12.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2</span> (12.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"def column_pre(df):\n    df.replace([-np.inf, np.inf], np.nan, inplace=True)\n    df.fillna(0)\n    #df.drop_duplicates(inplace=True)\n    column_mapping = {\n        'Avg Bwd Segment Size': 'Bwd Segment Size Avg',\n        'Subflow Bwd Bytes': 'Subflow Bwd Bytes',\n        'Init_Win_bytes_backward': 'Bwd Init Win Bytes',\n        'Bwd Packet Length Max': 'Bwd Packet Length Max',\n        'Destination Port': 'Dst Port',\n        'Flow IAT Min': 'Flow IAT Min',\n        'Bwd Header Length': 'Bwd Header Length',\n        'RST Flag Count': 'RST Flag Count',\n        'Bwd Packet Length Mean': 'Bwd Packet Length Mean',\n        'Fwd Packets/s': 'Fwd Packets/s'\n    }\n    df.rename(columns=column_mapping, inplace=True)\n    features = [\n    'Bwd Segment Size Avg',\n    'Subflow Bwd Bytes',\n    'Bwd Init Win Bytes',\n    'Bwd Packet Length Max',\n    'Dst Port',\n    'Flow IAT Min',\n    'Bwd Header Length',\n    'RST Flag Count',\n    'Bwd Packet Length Mean',\n    'Fwd Packets/s'\n]\n    return df[features]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:10:26.116536Z","iopub.execute_input":"2024-12-01T07:10:26.117199Z","iopub.status.idle":"2024-12-01T07:10:26.127093Z","shell.execute_reply.started":"2024-12-01T07:10:26.117145Z","shell.execute_reply":"2024-12-01T07:10:26.125956Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/testing-dataset/ddos_testing_Flow.csv_RENAMED.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:27:48.365166Z","iopub.execute_input":"2024-12-01T07:27:48.365858Z","iopub.status.idle":"2024-12-01T07:27:48.500064Z","shell.execute_reply.started":"2024-12-01T07:27:48.365802Z","shell.execute_reply":"2024-12-01T07:27:48.498633Z"}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"X= column_pre(df)\nX= scaler_00.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:27:48.712031Z","iopub.execute_input":"2024-12-01T07:27:48.712450Z","iopub.status.idle":"2024-12-01T07:27:48.748168Z","shell.execute_reply.started":"2024-12-01T07:27:48.712414Z","shell.execute_reply":"2024-12-01T07:27:48.746628Z"}},"outputs":[],"execution_count":76},{"cell_type":"code","source":"y_pred_prob = loaded_model_00.predict(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:27:49.026951Z","iopub.execute_input":"2024-12-01T07:27:49.028775Z","iopub.status.idle":"2024-12-01T07:27:50.929859Z","shell.execute_reply.started":"2024-12-01T07:27:49.028608Z","shell.execute_reply":"2024-12-01T07:27:50.928527Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step\n","output_type":"stream"}],"execution_count":77},{"cell_type":"code","source":"y_pred = (y_pred_prob > 0.25).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:27:50.932245Z","iopub.execute_input":"2024-12-01T07:27:50.932596Z","iopub.status.idle":"2024-12-01T07:27:50.938168Z","shell.execute_reply.started":"2024-12-01T07:27:50.932564Z","shell.execute_reply":"2024-12-01T07:27:50.937068Z"}},"outputs":[],"execution_count":78},{"cell_type":"code","source":"y_pred_count = np.unique(y_pred, return_counts=True)\ny_pred_count","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:27:50.939538Z","iopub.execute_input":"2024-12-01T07:27:50.939953Z","iopub.status.idle":"2024-12-01T07:27:50.952539Z","shell.execute_reply.started":"2024-12-01T07:27:50.939919Z","shell.execute_reply":"2024-12-01T07:27:50.951276Z"}},"outputs":[{"execution_count":79,"output_type":"execute_result","data":{"text/plain":"(array([0, 1]), array([   1, 9140]))"},"metadata":{}}],"execution_count":79},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Count occurrences of each class\nlabels, counts = np.unique(y_pred, return_counts=True)\n\n# Check if there's only one unique value\nif len(counts) == 1:\n  # Print message or handle the single class case\n  print(f\"Only one unique class found: {labels[0]} with count {counts[0]}\")\nelse:\n    # Plot bar chart\n    plt.figure(figsize=(8, 6))\n    plt.bar(labels, counts, color=['blue', 'orange'], tick_label=['Benign (0)', 'Malicious (1)'])\n    plt.xlabel('Class')\n    plt.ylabel('Count')\n    plt.title('Prediction Distribution')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T07:27:50.971560Z","iopub.execute_input":"2024-12-01T07:27:50.971994Z","iopub.status.idle":"2024-12-01T07:27:51.143360Z","shell.execute_reply.started":"2024-12-01T07:27:50.971958Z","shell.execute_reply":"2024-12-01T07:27:51.142080Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":80},{"cell_type":"markdown","source":"## Testing Model 01","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom tensorflow.keras.models import load_model\nimport pickle","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T07:40:55.820200Z","iopub.execute_input":"2024-11-30T07:40:55.821224Z","iopub.status.idle":"2024-11-30T07:41:09.852737Z","shell.execute_reply.started":"2024-11-30T07:40:55.821177Z","shell.execute_reply":"2024-11-30T07:41:09.851635Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Load the saved model\nloaded_model_01 = load_model('/kaggle/input/keras/keras/default/1/keras_model_01.h5')\n# Load the scaler\nwith open('/kaggle/input/keras/keras/default/1/scaler_01.pkl', 'rb') as f:\n    scaler_01 = pickle.load(f)\n# Verify the model structure\nloaded_model_01.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T07:46:27.640206Z","iopub.execute_input":"2024-11-30T07:46:27.640997Z","iopub.status.idle":"2024-11-30T07:46:28.059468Z","shell.execute_reply.started":"2024-11-30T07:46:27.640959Z","shell.execute_reply":"2024-11-30T07:46:28.057950Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │        \u001b[38;5;34m22,528\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │         \u001b[38;5;34m8,192\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │     \u001b[38;5;34m2,098,176\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │         \u001b[38;5;34m4,096\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │       \u001b[38;5;34m524,800\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │         \u001b[38;5;34m2,048\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m131,328\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)             │           \u001b[38;5;34m528\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)              │           \u001b[38;5;34m136\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m9\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │        <span style=\"color: #00af00; text-decoration-color: #00af00\">22,528</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,192</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,098,176</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">4,096</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">524,800</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,835,075\u001b[0m (10.81 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,835,075</span> (10.81 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,827,905\u001b[0m (10.79 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,827,905</span> (10.79 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m7,168\u001b[0m (28.00 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">7,168</span> (28.00 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m2\u001b[0m (12.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2</span> (12.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"def column_pre(df):\n    df.replace([-np.inf, np.inf], np.nan, inplace=True)\n    df.dropna(inplace=True)\n    df.drop_duplicates(inplace=True)\n\n    column_mapping = {\n        'RST Flag Count': 'RST Flag Count',\n        'Destination Port': 'Dst Port',\n        'Bwd Packet Length Max': 'Bwd Packet Length Max',\n        'Bwd Packet Length Mean': 'Bwd Packet Length Mean',\n        'Init_Win_bytes_backward': 'Bwd Init Win Bytes',\n        'Flow IAT Min': 'Flow IAT Min',\n        'Fwd Packet Length Min': 'Fwd Packet Length Min',\n        'Avg Bwd Segment Size': 'Bwd Segment Size Avg',\n        'Subflow Bwd Packets': 'Subflow Bwd Packets',\n        'Init_Win_bytes_forward': 'FWD Init Win Bytes'\n    }\n    df.rename(columns=column_mapping, inplace=True)\n    features = [\n    'RST Flag Count',\n    'Dst Port',\n    'Bwd Packet Length Max',\n    'Bwd Packet Length Mean',\n    'Bwd Init Win Bytes',\n    'Flow IAT Min',\n    'Fwd Packet Length Min',\n    'Bwd Segment Size Avg',\n    'Subflow Bwd Packets',\n    'FWD Init Win Bytes'\n]\n    return df[features]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T07:46:19.025628Z","iopub.execute_input":"2024-11-30T07:46:19.025995Z","iopub.status.idle":"2024-11-30T07:46:19.032945Z","shell.execute_reply.started":"2024-11-30T07:46:19.025965Z","shell.execute_reply":"2024-11-30T07:46:19.031904Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/testing-dataset/benign.pcap_Flow.csv_RENAMED.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T08:28:31.132531Z","iopub.execute_input":"2024-11-30T08:28:31.132918Z","iopub.status.idle":"2024-11-30T08:28:31.150854Z","shell.execute_reply.started":"2024-11-30T08:28:31.132888Z","shell.execute_reply":"2024-11-30T08:28:31.149458Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"X= column_pre(df)\n#X= scaler_01.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T08:28:31.640987Z","iopub.execute_input":"2024-11-30T08:28:31.641366Z","iopub.status.idle":"2024-11-30T08:28:31.661643Z","shell.execute_reply.started":"2024-11-30T08:28:31.641332Z","shell.execute_reply":"2024-11-30T08:28:31.660556Z"}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"y_pred_prob = loaded_model_01.predict(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T08:28:31.979812Z","iopub.execute_input":"2024-11-30T08:28:31.980185Z","iopub.status.idle":"2024-11-30T08:28:32.138513Z","shell.execute_reply.started":"2024-11-30T08:28:31.980151Z","shell.execute_reply":"2024-11-30T08:28:32.137492Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step\n","output_type":"stream"}],"execution_count":63},{"cell_type":"code","source":"y_pred = (y_pred_prob > 0.25).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T08:28:32.232975Z","iopub.execute_input":"2024-11-30T08:28:32.233927Z","iopub.status.idle":"2024-11-30T08:28:32.238892Z","shell.execute_reply.started":"2024-11-30T08:28:32.233886Z","shell.execute_reply":"2024-11-30T08:28:32.237476Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Count occurrences of each class\nlabels, counts = np.unique(y_pred, return_counts=True)\n\n# Check if there's only one unique value\nif len(counts) == 1:\n  # Print message or handle the single class case\n  print(f\"Only one unique class found: {labels[0]} with count {counts[0]}\")\nelse:\n    # Plot bar chart\n    plt.figure(figsize=(8, 6))\n    plt.bar(labels, counts, color=['blue', 'orange'], tick_label=['Benign (0)', 'Malicious (1)'])\n    plt.xlabel('Class')\n    plt.ylabel('Count')\n    plt.title('Prediction Distribution')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T08:28:32.850481Z","iopub.execute_input":"2024-11-30T08:28:32.851252Z","iopub.status.idle":"2024-11-30T08:28:33.055598Z","shell.execute_reply.started":"2024-11-30T08:28:32.851215Z","shell.execute_reply":"2024-11-30T08:28:33.054529Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":65},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}